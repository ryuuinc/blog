{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/img/build-telegram-bot/banner.png","path":"img/build-telegram-bot/banner.png","modified":1,"renderable":0},{"_id":"source/img/psn-game-boost-plan/banner.png","path":"img/psn-game-boost-plan/banner.png","modified":1,"renderable":0},{"_id":"source/img/deploy-hexo-with-git-hook/banner.png","path":"img/deploy-hexo-with-git-hook/banner.png","modified":1,"renderable":0},{"_id":"source/img/same-origin-and-cross-domain/banner.png","path":"img/same-origin-and-cross-domain/banner.png","modified":1,"renderable":0},{"_id":"source/img/site/avatar.png","path":"img/site/avatar.png","modified":1,"renderable":0},{"_id":"source/img/site/banner.webp","path":"img/site/banner.webp","modified":1,"renderable":0},{"_id":"source/img/site/favicon.ico","path":"img/site/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/unicode-in-javascript/banner.png","path":"img/unicode-in-javascript/banner.png","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/tags.md","hash":"536fb66f2095fab4f2fbf15e65e6bfbf5d84c70a","modified":1661596008416},{"_id":"source/_posts/psn-game-boost-plan.md","hash":"03c97ef6251eac9c822925a380a91668f82c5132","modified":1661596008412},{"_id":"source/_posts/build-telegram-bot.md","hash":"6e3761a815ab93481dfff4563ce4e15f67b27050","modified":1661596008411},{"_id":"source/_posts/unicode-in-javascript.md","hash":"224b5a94ad6380c5dcdabfd35970cadd126b3394","modified":1661596008412},{"_id":"source/about/index.md","hash":"e9efdf1fa66de11ac758c0c9faa1041cb32c2b95","modified":1661596008413},{"_id":"source/_posts/deploy-hexo-with-git-hook.md","hash":"3d48020c6da253b2658b71f5d96e2e26f9522ac3","modified":1661596008412},{"_id":"source/img/build-telegram-bot/banner.png","hash":"1e025adc8c258433b35be8bb852645d9fda3ab32","modified":1661596008413},{"_id":"source/img/psn-game-boost-plan/banner.png","hash":"2fef9ff9b8119c3ad7d9a2a5ab3cc49f895f2316","modified":1661596008414},{"_id":"source/_posts/same-origin-and-cross-domain.md","hash":"e59802bcb3f9214dd6ec4e9dadc166b4e1b486d1","modified":1661596008412},{"_id":"source/img/deploy-hexo-with-git-hook/banner.png","hash":"3c23e4f90318514d10c83d3b453e89bbd2c525bd","modified":1661596008413},{"_id":"source/img/same-origin-and-cross-domain/banner.png","hash":"067853fe67992e81cd5abf27d60e21e92113da4a","modified":1677310356979},{"_id":"source/img/site/avatar.png","hash":"e98573914df229cbaae7ca0485530e5960cc82f5","modified":1663934900684},{"_id":"source/img/site/banner.webp","hash":"e7f3dd46d4ae5892448f1c52c1ce77ae818f2621","modified":1677310708488},{"_id":"source/img/site/favicon.ico","hash":"99de948b4f520d0ce2eb245af62e6b56ffec43df","modified":1661596008416},{"_id":"source/img/unicode-in-javascript/banner.png","hash":"d74b771b67d5296677923081b7f28f5b69e31a16","modified":1661596008416},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1676280377430},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1676280377263},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1676280377175},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1676280377171},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1676280377172},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1676280377181},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1676280377209},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":1676280377435},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1676280377161},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1676280377264},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1676280377177},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1676280377197},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1676280377198},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1676280377214},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1676280377215},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1676280377199},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1676280377211},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1676280377440},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1676280377435},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1676280377437},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1676280377438},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1676280377439},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1676280377243},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1676280377249},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1676280377442},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1676280377254},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1676280377441},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1676280377230},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1676280377256},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1676280377250},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1676280377443},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1676280377230},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1676280377441},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1676280377231},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1676280377242},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1676280377234},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1676280377245},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1676280377254},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1676280377259},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1676280377262},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1676280377260},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1676280377263},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1676280377193},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1676280377174},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1676280377184},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1676280377180},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1676280377194},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1676280377210},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1676280377225},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1676280377189},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1676280377179},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1676280377236},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1676280377226},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1676280377252},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1676280377186},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1676280377245},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1676280377252},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1676280377253},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1676280377258},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1676280377228},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1676280377259},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1676280377203},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1676280377212},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1676280377265},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1676280377212},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1676280377389},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1676280377390},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1676280377433},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1676280377225},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1676280377416},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1676280377224},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1676280377169},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1676280377419},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1676280377423},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1676280377240},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1676280377233},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1676280377227},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1676280377248},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1676280377229},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1676280377236},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1676280377239},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1676280377238},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1676280377250},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1676280377251},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1676280377245},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1676280377255},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1676280377246},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1676280377182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1676280377190},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1676280377262},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1676280377202},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1676280377216},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1676280377187},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1676280377187},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1676280377211},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1676280377219},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1676280377190},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1676280377221},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1676280377222},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1676280377177},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1676280377214},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1676280377208},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1676280377178},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1676280377213},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1676280377206},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1676280377176},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1676280377213},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1676280377185},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1676280377207},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1676280377188},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1676280377195},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1676280377216},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1676280377173},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1676280377206},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1676280377188},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1676280377184},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1676280377209},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1676280377398},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1676280377203},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1676280377426},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1676280377391},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1676280377397},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1676280377217},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1676280377173},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1676280377402},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1676280377399},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1676280377400},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1676280377421},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1676280377423},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1676280377406},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1676280377410},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1676280377421},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1676280377409},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1676280377404},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1676280377422},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1676280377407},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1676280377418},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1676280377431},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1676280377428},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1676280377424},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1676280377392},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1676280377402},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1676280377427},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1676280377408},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1676280377411},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1676280377397},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1676280377425},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1676280377415},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1676280377425},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1676280377425},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1676280377412},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1676280377426},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1676280377429},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1676280377430},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1676280377416},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1676280377429},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1676280377432},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1676280377389}],"Category":[{"name":"Unix","_id":"clejnkd4t0003uoqrf5v6345d"},{"name":"Life","_id":"clejnkd4y000buoqr0ocdex44"},{"name":"FE","_id":"clejnkd4z000guoqr5e1b2iua"}],"Data":[],"Page":[{"title":"标签","date":"2022-09-21T16:55:49.554Z","layout":"tags","_content":"","source":"tags.md","raw":"---\ntitle: 标签\ndate:\nlayout: tags\npermalink: /tags/\n---\n","updated":"2022-08-27T10:26:48.416Z","path":"/tags/index.html","comments":1,"_id":"clejnkd4n0000uoqrf37igmv4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2020-07-22T04:20:33.000Z","layout":"about","_content":"\n随便写写，记录生活，开开心心。\n\n## 🔨\n\n- ![Github](http://img.shields.io/badge/-Github-000000?style=flat&logo=github&logoColor=FFFFFF)\n- ![VS Code](http://img.shields.io/badge/-VS%20Code-007ACC?style=flat&logo=visual%20studio%20code&logoColor=white)\n- ![Node.js](https://img.shields.io/badge/-Node.js-3C873A?style=flat&logo=Node.js&logoColor=white)\n- ![HTML5](https://img.shields.io/badge/-HTML5-E34F26?style=flat&logo=html5&logoColor=white)\n- ![CSS3](https://img.shields.io/badge/-CSS3-1572B6?style=flat&logo=css3&logoColor=white)\n- ![JavaScript](https://img.shields.io/badge/-JavaScript-eed718?style=flat&logo=javascript&logoColor=ffffff)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-07-22 12:20:33\nlayout: about\n---\n\n随便写写，记录生活，开开心心。\n\n## 🔨\n\n- ![Github](http://img.shields.io/badge/-Github-000000?style=flat&logo=github&logoColor=FFFFFF)\n- ![VS Code](http://img.shields.io/badge/-VS%20Code-007ACC?style=flat&logo=visual%20studio%20code&logoColor=white)\n- ![Node.js](https://img.shields.io/badge/-Node.js-3C873A?style=flat&logo=Node.js&logoColor=white)\n- ![HTML5](https://img.shields.io/badge/-HTML5-E34F26?style=flat&logo=html5&logoColor=white)\n- ![CSS3](https://img.shields.io/badge/-CSS3-1572B6?style=flat&logo=css3&logoColor=white)\n- ![JavaScript](https://img.shields.io/badge/-JavaScript-eed718?style=flat&logo=javascript&logoColor=ffffff)\n","updated":"2022-08-27T10:26:48.413Z","path":"about/index.html","comments":1,"_id":"clejnkd4s0002uoqr6ec17zee","content":"<p>随便写写，记录生活，开开心心。</p>\n<h2 id=\"🔨\"><a href=\"#🔨\" class=\"headerlink\" title=\"🔨\"></a>🔨</h2><ul>\n<li><img src=\"http://img.shields.io/badge/-Github-000000?style=flat&logo=github&logoColor=FFFFFF\" alt=\"Github\"></li>\n<li><img src=\"http://img.shields.io/badge/-VS%20Code-007ACC?style=flat&logo=visual%20studio%20code&logoColor=white\" alt=\"VS Code\"></li>\n<li><img src=\"https://img.shields.io/badge/-Node.js-3C873A?style=flat&logo=Node.js&logoColor=white\" alt=\"Node.js\"></li>\n<li><img src=\"https://img.shields.io/badge/-HTML5-E34F26?style=flat&logo=html5&logoColor=white\" alt=\"HTML5\"></li>\n<li><img src=\"https://img.shields.io/badge/-CSS3-1572B6?style=flat&logo=css3&logoColor=white\" alt=\"CSS3\"></li>\n<li><img src=\"https://img.shields.io/badge/-JavaScript-eed718?style=flat&logo=javascript&logoColor=ffffff\" alt=\"JavaScript\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>随便写写，记录生活，开开心心。</p>\n<h2 id=\"🔨\"><a href=\"#🔨\" class=\"headerlink\" title=\"🔨\"></a>🔨</h2><ul>\n<li><img src=\"http://img.shields.io/badge/-Github-000000?style=flat&logo=github&logoColor=FFFFFF\" alt=\"Github\"></li>\n<li><img src=\"http://img.shields.io/badge/-VS%20Code-007ACC?style=flat&logo=visual%20studio%20code&logoColor=white\" alt=\"VS Code\"></li>\n<li><img src=\"https://img.shields.io/badge/-Node.js-3C873A?style=flat&logo=Node.js&logoColor=white\" alt=\"Node.js\"></li>\n<li><img src=\"https://img.shields.io/badge/-HTML5-E34F26?style=flat&logo=html5&logoColor=white\" alt=\"HTML5\"></li>\n<li><img src=\"https://img.shields.io/badge/-CSS3-1572B6?style=flat&logo=css3&logoColor=white\" alt=\"CSS3\"></li>\n<li><img src=\"https://img.shields.io/badge/-JavaScript-eed718?style=flat&logo=javascript&logoColor=ffffff\" alt=\"JavaScript\"></li>\n</ul>\n"}],"Post":[{"title":"如何创建一个 Telegram Bot","date":"2019-04-20T02:25:50.000Z","index_img":"/img/build-telegram-bot/banner.png","_content":"\n作为一个 Telegram 的重度用户，早在使用之初我就听说 `Telegram Bot` 的开放性。深入了解以后我使用 Bot 实现了一系列功能，比如通过 Bot 查询公交到站情况、查询历史上的今天、通过 `Github Release API` 获取最新 SS 下载链接以及查询信息生成二维码等。这些功能通过简单命令调用，相当方便。今天就来分享一下如何创建一个 `Telegram Bot`。\n\n<!-- more -->\n\n### 准备工作\n\n- 通过 [Bot Father](https://telegram.me/botfather) 填写详情并获取对应的 Token\n\n- 熟悉官方文档，参见：[Telegram Bot API](https://core.telegram.org/bots/api)\n\n- 加持 HTTPS 的域名以及一台 VPS 用来运行你的实例\n\n### 正式开发\n\n官方提供的文档已经十分详细了，但是很多细节需要二次封装，所以使用了基于 Node.js 的 `node-telegram-bot-api`，以下为了方便，简称 NT。\n\nNT 的使用相当简单，只需要十多行代码就可以实现一个简单的 Bot。这里贴一段官方的代码，其中的注释我已经翻译过来了。\n\n```Javascript\nconst TelegramBot = require('node-telegram-bot-api')\n\n// 替换 token 的值为你从 @BotFather 那里申请的 token\nconst token = 'YOUR_TELEGRAM_BOT_TOKEN'\n\n// 由于是在开发阶段，所以使用 'polling'（轮询）模式来获取发给 bot 的信息\nconst bot = new TelegramBot(token, { polling: true })\n\n// 匹配 '/echo [whatever]'\nbot.onText(/\\/echo (.+)/, (msg, match) => {\n  // 'msg' 是从 Telegram 接手到的信息\n  // 'match' 是对传来的消息执行正则后获得的结果\n\n  const chatId = msg.chat.id\n  const resp = match[1] // 捕获到的 'whatever'\n\n  // 把匹配到的 'whatever' 发送回对话中\n  bot.sendMessage(chatId, resp)\n})\n\n// 监听任何种类的信息，如：音频，视频，图片，文本等\nbot.on('message', msg => {\n  const chatId = msg.chat.id\n\n  // 发送 'Received your message' 到对话中\n  bot.sendMessage(chatId, 'Received your message')\n})\n```\n\nTelegram 的工作方式分为两种，一种是不停的轮询 Telegram 服务器来获取发送给你 Bot 的消息，即 polling。另一种则是设置 WebHook ，这样当 Telegram 服务器收到变动则会将消息内容及相关信息通过 WebHook 交给你的服务端来处理，但是这种方式需要你的 VPS 配置 HTTPS 才能使用（安全考量）。\n\n关于 HTTPS 的认证，可以看看 [acme.sh](https://github.com/Neilpang/acme.sh)，它通过实现 acme 协议，可以从 letsencrypt 生成免费的证书，并且提供定时续签等功能，十分的方便。\n\n当你完成 HTTPS 认证后，可以通过 `process.env.NODE_ENV` 来实现开发和线上环境的区分，如果你还不了解 `process.env`，请看[这里](https://nodejs.org/api/process.html#process_process_env)。\n\n```Javascript\nif (process.env.NODE_ENV === 'development') {\n  // 开发环境使用轮询模式\n  const bot = new TelegramBot(TOKEN, { polling: true })\n} else if (process.env.NODE_ENV === 'production') {\n  // 线上环境设置 `WebHook`\n  const bot = new TelegramBot(TOKEN)\n  bot.setWebHook(VPSURL)\n\n  // 将接收到的数据转成 JSON\n  const app = express()\n  app.use(bodyParser.json())\n\n  // 配置路由接受来自 Telegram 的消息\n  app.post(`/bot`, (req, res) => {\n    bot.processUpdate(req.body)\n    res.sendStatus(200)\n  })\n\n  // 启动 Express 服务器\n  app.listen(9999, () => {\n    console.log('Express server is listening on 9999')\n  })\n}\n```\n\n当完成所有步骤后，你就可以将其部署在你的 VPS 之上了，这里推荐使用 PM2 来实现部署，不仅支持负载均衡，还能实现热重启。这里贴一段 PM2 配置文件，使用 `pm2 start app.json` 就可以顺畅体验了。\n\n```Javascript\n{\n  \"apps\": [\n    {\n      \"name\": \"TelegramBot\",\n      \"script\": \"./server/index.js\",\n      \"env\": {\n        \"NODE_ENV\": \"production\"\n      }\n    }\n  ]\n}\n```\n","source":"_posts/build-telegram-bot.md","raw":"---\ntitle: 如何创建一个 Telegram Bot\ndate: 2019-04-20 10:25:50\ncategories:\n  - Unix\ntags:\n  - Telegram\nindex_img: /img/build-telegram-bot/banner.png\n---\n\n作为一个 Telegram 的重度用户，早在使用之初我就听说 `Telegram Bot` 的开放性。深入了解以后我使用 Bot 实现了一系列功能，比如通过 Bot 查询公交到站情况、查询历史上的今天、通过 `Github Release API` 获取最新 SS 下载链接以及查询信息生成二维码等。这些功能通过简单命令调用，相当方便。今天就来分享一下如何创建一个 `Telegram Bot`。\n\n<!-- more -->\n\n### 准备工作\n\n- 通过 [Bot Father](https://telegram.me/botfather) 填写详情并获取对应的 Token\n\n- 熟悉官方文档，参见：[Telegram Bot API](https://core.telegram.org/bots/api)\n\n- 加持 HTTPS 的域名以及一台 VPS 用来运行你的实例\n\n### 正式开发\n\n官方提供的文档已经十分详细了，但是很多细节需要二次封装，所以使用了基于 Node.js 的 `node-telegram-bot-api`，以下为了方便，简称 NT。\n\nNT 的使用相当简单，只需要十多行代码就可以实现一个简单的 Bot。这里贴一段官方的代码，其中的注释我已经翻译过来了。\n\n```Javascript\nconst TelegramBot = require('node-telegram-bot-api')\n\n// 替换 token 的值为你从 @BotFather 那里申请的 token\nconst token = 'YOUR_TELEGRAM_BOT_TOKEN'\n\n// 由于是在开发阶段，所以使用 'polling'（轮询）模式来获取发给 bot 的信息\nconst bot = new TelegramBot(token, { polling: true })\n\n// 匹配 '/echo [whatever]'\nbot.onText(/\\/echo (.+)/, (msg, match) => {\n  // 'msg' 是从 Telegram 接手到的信息\n  // 'match' 是对传来的消息执行正则后获得的结果\n\n  const chatId = msg.chat.id\n  const resp = match[1] // 捕获到的 'whatever'\n\n  // 把匹配到的 'whatever' 发送回对话中\n  bot.sendMessage(chatId, resp)\n})\n\n// 监听任何种类的信息，如：音频，视频，图片，文本等\nbot.on('message', msg => {\n  const chatId = msg.chat.id\n\n  // 发送 'Received your message' 到对话中\n  bot.sendMessage(chatId, 'Received your message')\n})\n```\n\nTelegram 的工作方式分为两种，一种是不停的轮询 Telegram 服务器来获取发送给你 Bot 的消息，即 polling。另一种则是设置 WebHook ，这样当 Telegram 服务器收到变动则会将消息内容及相关信息通过 WebHook 交给你的服务端来处理，但是这种方式需要你的 VPS 配置 HTTPS 才能使用（安全考量）。\n\n关于 HTTPS 的认证，可以看看 [acme.sh](https://github.com/Neilpang/acme.sh)，它通过实现 acme 协议，可以从 letsencrypt 生成免费的证书，并且提供定时续签等功能，十分的方便。\n\n当你完成 HTTPS 认证后，可以通过 `process.env.NODE_ENV` 来实现开发和线上环境的区分，如果你还不了解 `process.env`，请看[这里](https://nodejs.org/api/process.html#process_process_env)。\n\n```Javascript\nif (process.env.NODE_ENV === 'development') {\n  // 开发环境使用轮询模式\n  const bot = new TelegramBot(TOKEN, { polling: true })\n} else if (process.env.NODE_ENV === 'production') {\n  // 线上环境设置 `WebHook`\n  const bot = new TelegramBot(TOKEN)\n  bot.setWebHook(VPSURL)\n\n  // 将接收到的数据转成 JSON\n  const app = express()\n  app.use(bodyParser.json())\n\n  // 配置路由接受来自 Telegram 的消息\n  app.post(`/bot`, (req, res) => {\n    bot.processUpdate(req.body)\n    res.sendStatus(200)\n  })\n\n  // 启动 Express 服务器\n  app.listen(9999, () => {\n    console.log('Express server is listening on 9999')\n  })\n}\n```\n\n当完成所有步骤后，你就可以将其部署在你的 VPS 之上了，这里推荐使用 PM2 来实现部署，不仅支持负载均衡，还能实现热重启。这里贴一段 PM2 配置文件，使用 `pm2 start app.json` 就可以顺畅体验了。\n\n```Javascript\n{\n  \"apps\": [\n    {\n      \"name\": \"TelegramBot\",\n      \"script\": \"./server/index.js\",\n      \"env\": {\n        \"NODE_ENV\": \"production\"\n      }\n    }\n  ]\n}\n```\n","slug":"build-telegram-bot","published":1,"updated":"2022-08-27T10:26:48.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clejnkd4q0001uoqrbawiafgx","content":"<p>作为一个 Telegram 的重度用户，早在使用之初我就听说 <code>Telegram Bot</code> 的开放性。深入了解以后我使用 Bot 实现了一系列功能，比如通过 Bot 查询公交到站情况、查询历史上的今天、通过 <code>Github Release API</code> 获取最新 SS 下载链接以及查询信息生成二维码等。这些功能通过简单命令调用，相当方便。今天就来分享一下如何创建一个 <code>Telegram Bot</code>。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><p>通过 <a href=\"https://telegram.me/botfather\">Bot Father</a> 填写详情并获取对应的 Token</p>\n</li>\n<li><p>熟悉官方文档，参见：<a href=\"https://core.telegram.org/bots/api\">Telegram Bot API</a></p>\n</li>\n<li><p>加持 HTTPS 的域名以及一台 VPS 用来运行你的实例</p>\n</li>\n</ul>\n<h3 id=\"正式开发\"><a href=\"#正式开发\" class=\"headerlink\" title=\"正式开发\"></a>正式开发</h3><p>官方提供的文档已经十分详细了，但是很多细节需要二次封装，所以使用了基于 Node.js 的 <code>node-telegram-bot-api</code>，以下为了方便，简称 NT。</p>\n<p>NT 的使用相当简单，只需要十多行代码就可以实现一个简单的 Bot。这里贴一段官方的代码，其中的注释我已经翻译过来了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">TelegramBot</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;node-telegram-bot-api&#x27;</span>)<br><br><span class=\"hljs-comment\">// 替换 token 的值为你从 @BotFather 那里申请的 token</span><br><span class=\"hljs-keyword\">const</span> token = <span class=\"hljs-string\">&#x27;YOUR_TELEGRAM_BOT_TOKEN&#x27;</span><br><br><span class=\"hljs-comment\">// 由于是在开发阶段，所以使用 &#x27;polling&#x27;（轮询）模式来获取发给 bot 的信息</span><br><span class=\"hljs-keyword\">const</span> bot = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TelegramBot</span>(token, &#123; <span class=\"hljs-attr\">polling</span>: <span class=\"hljs-literal\">true</span> &#125;)<br><br><span class=\"hljs-comment\">// 匹配 &#x27;/echo [whatever]&#x27;</span><br>bot.<span class=\"hljs-title function_\">onText</span>(<span class=\"hljs-regexp\">/\\/echo (.+)/</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">msg, match</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// &#x27;msg&#x27; 是从 Telegram 接手到的信息</span><br>  <span class=\"hljs-comment\">// &#x27;match&#x27; 是对传来的消息执行正则后获得的结果</span><br><br>  <span class=\"hljs-keyword\">const</span> chatId = msg.<span class=\"hljs-property\">chat</span>.<span class=\"hljs-property\">id</span><br>  <span class=\"hljs-keyword\">const</span> resp = match[<span class=\"hljs-number\">1</span>] <span class=\"hljs-comment\">// 捕获到的 &#x27;whatever&#x27;</span><br><br>  <span class=\"hljs-comment\">// 把匹配到的 &#x27;whatever&#x27; 发送回对话中</span><br>  bot.<span class=\"hljs-title function_\">sendMessage</span>(chatId, resp)<br>&#125;)<br><br><span class=\"hljs-comment\">// 监听任何种类的信息，如：音频，视频，图片，文本等</span><br>bot.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;message&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">msg</span> =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> chatId = msg.<span class=\"hljs-property\">chat</span>.<span class=\"hljs-property\">id</span><br><br>  <span class=\"hljs-comment\">// 发送 &#x27;Received your message&#x27; 到对话中</span><br>  bot.<span class=\"hljs-title function_\">sendMessage</span>(chatId, <span class=\"hljs-string\">&#x27;Received your message&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>Telegram 的工作方式分为两种，一种是不停的轮询 Telegram 服务器来获取发送给你 Bot 的消息，即 polling。另一种则是设置 WebHook ，这样当 Telegram 服务器收到变动则会将消息内容及相关信息通过 WebHook 交给你的服务端来处理，但是这种方式需要你的 VPS 配置 HTTPS 才能使用（安全考量）。</p>\n<p>关于 HTTPS 的认证，可以看看 <a href=\"https://github.com/Neilpang/acme.sh\">acme.sh</a>，它通过实现 acme 协议，可以从 letsencrypt 生成免费的证书，并且提供定时续签等功能，十分的方便。</p>\n<p>当你完成 HTTPS 认证后，可以通过 <code>process.env.NODE_ENV</code> 来实现开发和线上环境的区分，如果你还不了解 <code>process.env</code>，请看<a href=\"https://nodejs.org/api/process.html#process_process_env\">这里</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">if</span> (process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> === <span class=\"hljs-string\">&#x27;development&#x27;</span>) &#123;<br>  <span class=\"hljs-comment\">// 开发环境使用轮询模式</span><br>  <span class=\"hljs-keyword\">const</span> bot = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TelegramBot</span>(<span class=\"hljs-variable constant_\">TOKEN</span>, &#123; <span class=\"hljs-attr\">polling</span>: <span class=\"hljs-literal\">true</span> &#125;)<br>&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> === <span class=\"hljs-string\">&#x27;production&#x27;</span>) &#123;<br>  <span class=\"hljs-comment\">// 线上环境设置 `WebHook`</span><br>  <span class=\"hljs-keyword\">const</span> bot = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TelegramBot</span>(<span class=\"hljs-variable constant_\">TOKEN</span>)<br>  bot.<span class=\"hljs-title function_\">setWebHook</span>(<span class=\"hljs-variable constant_\">VPSURL</span>)<br><br>  <span class=\"hljs-comment\">// 将接收到的数据转成 JSON</span><br>  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>()<br>  app.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">json</span>())<br><br>  <span class=\"hljs-comment\">// 配置路由接受来自 Telegram 的消息</span><br>  app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">`/bot`</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> &#123;<br>    bot.<span class=\"hljs-title function_\">processUpdate</span>(req.<span class=\"hljs-property\">body</span>)<br>    res.<span class=\"hljs-title function_\">sendStatus</span>(<span class=\"hljs-number\">200</span>)<br>  &#125;)<br><br>  <span class=\"hljs-comment\">// 启动 Express 服务器</span><br>  app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">9999</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Express server is listening on 9999&#x27;</span>)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当完成所有步骤后，你就可以将其部署在你的 VPS 之上了，这里推荐使用 PM2 来实现部署，不仅支持负载均衡，还能实现热重启。这里贴一段 PM2 配置文件，使用 <code>pm2 start app.json</code> 就可以顺畅体验了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\">&#123;<br>  <span class=\"hljs-string\">&quot;apps&quot;</span>: [<br>    &#123;<br>      <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;TelegramBot&quot;</span>,<br>      <span class=\"hljs-string\">&quot;script&quot;</span>: <span class=\"hljs-string\">&quot;./server/index.js&quot;</span>,<br>      <span class=\"hljs-string\">&quot;env&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;NODE_ENV&quot;</span>: <span class=\"hljs-string\">&quot;production&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>作为一个 Telegram 的重度用户，早在使用之初我就听说 <code>Telegram Bot</code> 的开放性。深入了解以后我使用 Bot 实现了一系列功能，比如通过 Bot 查询公交到站情况、查询历史上的今天、通过 <code>Github Release API</code> 获取最新 SS 下载链接以及查询信息生成二维码等。这些功能通过简单命令调用，相当方便。今天就来分享一下如何创建一个 <code>Telegram Bot</code>。</p>","more":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><p>通过 <a href=\"https://telegram.me/botfather\">Bot Father</a> 填写详情并获取对应的 Token</p>\n</li>\n<li><p>熟悉官方文档，参见：<a href=\"https://core.telegram.org/bots/api\">Telegram Bot API</a></p>\n</li>\n<li><p>加持 HTTPS 的域名以及一台 VPS 用来运行你的实例</p>\n</li>\n</ul>\n<h3 id=\"正式开发\"><a href=\"#正式开发\" class=\"headerlink\" title=\"正式开发\"></a>正式开发</h3><p>官方提供的文档已经十分详细了，但是很多细节需要二次封装，所以使用了基于 Node.js 的 <code>node-telegram-bot-api</code>，以下为了方便，简称 NT。</p>\n<p>NT 的使用相当简单，只需要十多行代码就可以实现一个简单的 Bot。这里贴一段官方的代码，其中的注释我已经翻译过来了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">TelegramBot</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;node-telegram-bot-api&#x27;</span>)<br><br><span class=\"hljs-comment\">// 替换 token 的值为你从 @BotFather 那里申请的 token</span><br><span class=\"hljs-keyword\">const</span> token = <span class=\"hljs-string\">&#x27;YOUR_TELEGRAM_BOT_TOKEN&#x27;</span><br><br><span class=\"hljs-comment\">// 由于是在开发阶段，所以使用 &#x27;polling&#x27;（轮询）模式来获取发给 bot 的信息</span><br><span class=\"hljs-keyword\">const</span> bot = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TelegramBot</span>(token, &#123; <span class=\"hljs-attr\">polling</span>: <span class=\"hljs-literal\">true</span> &#125;)<br><br><span class=\"hljs-comment\">// 匹配 &#x27;/echo [whatever]&#x27;</span><br>bot.<span class=\"hljs-title function_\">onText</span>(<span class=\"hljs-regexp\">/\\/echo (.+)/</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">msg, match</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// &#x27;msg&#x27; 是从 Telegram 接手到的信息</span><br>  <span class=\"hljs-comment\">// &#x27;match&#x27; 是对传来的消息执行正则后获得的结果</span><br><br>  <span class=\"hljs-keyword\">const</span> chatId = msg.<span class=\"hljs-property\">chat</span>.<span class=\"hljs-property\">id</span><br>  <span class=\"hljs-keyword\">const</span> resp = match[<span class=\"hljs-number\">1</span>] <span class=\"hljs-comment\">// 捕获到的 &#x27;whatever&#x27;</span><br><br>  <span class=\"hljs-comment\">// 把匹配到的 &#x27;whatever&#x27; 发送回对话中</span><br>  bot.<span class=\"hljs-title function_\">sendMessage</span>(chatId, resp)<br>&#125;)<br><br><span class=\"hljs-comment\">// 监听任何种类的信息，如：音频，视频，图片，文本等</span><br>bot.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;message&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">msg</span> =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> chatId = msg.<span class=\"hljs-property\">chat</span>.<span class=\"hljs-property\">id</span><br><br>  <span class=\"hljs-comment\">// 发送 &#x27;Received your message&#x27; 到对话中</span><br>  bot.<span class=\"hljs-title function_\">sendMessage</span>(chatId, <span class=\"hljs-string\">&#x27;Received your message&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>Telegram 的工作方式分为两种，一种是不停的轮询 Telegram 服务器来获取发送给你 Bot 的消息，即 polling。另一种则是设置 WebHook ，这样当 Telegram 服务器收到变动则会将消息内容及相关信息通过 WebHook 交给你的服务端来处理，但是这种方式需要你的 VPS 配置 HTTPS 才能使用（安全考量）。</p>\n<p>关于 HTTPS 的认证，可以看看 <a href=\"https://github.com/Neilpang/acme.sh\">acme.sh</a>，它通过实现 acme 协议，可以从 letsencrypt 生成免费的证书，并且提供定时续签等功能，十分的方便。</p>\n<p>当你完成 HTTPS 认证后，可以通过 <code>process.env.NODE_ENV</code> 来实现开发和线上环境的区分，如果你还不了解 <code>process.env</code>，请看<a href=\"https://nodejs.org/api/process.html#process_process_env\">这里</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">if</span> (process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> === <span class=\"hljs-string\">&#x27;development&#x27;</span>) &#123;<br>  <span class=\"hljs-comment\">// 开发环境使用轮询模式</span><br>  <span class=\"hljs-keyword\">const</span> bot = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TelegramBot</span>(<span class=\"hljs-variable constant_\">TOKEN</span>, &#123; <span class=\"hljs-attr\">polling</span>: <span class=\"hljs-literal\">true</span> &#125;)<br>&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> === <span class=\"hljs-string\">&#x27;production&#x27;</span>) &#123;<br>  <span class=\"hljs-comment\">// 线上环境设置 `WebHook`</span><br>  <span class=\"hljs-keyword\">const</span> bot = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TelegramBot</span>(<span class=\"hljs-variable constant_\">TOKEN</span>)<br>  bot.<span class=\"hljs-title function_\">setWebHook</span>(<span class=\"hljs-variable constant_\">VPSURL</span>)<br><br>  <span class=\"hljs-comment\">// 将接收到的数据转成 JSON</span><br>  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>()<br>  app.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">json</span>())<br><br>  <span class=\"hljs-comment\">// 配置路由接受来自 Telegram 的消息</span><br>  app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">`/bot`</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> &#123;<br>    bot.<span class=\"hljs-title function_\">processUpdate</span>(req.<span class=\"hljs-property\">body</span>)<br>    res.<span class=\"hljs-title function_\">sendStatus</span>(<span class=\"hljs-number\">200</span>)<br>  &#125;)<br><br>  <span class=\"hljs-comment\">// 启动 Express 服务器</span><br>  app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">9999</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Express server is listening on 9999&#x27;</span>)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当完成所有步骤后，你就可以将其部署在你的 VPS 之上了，这里推荐使用 PM2 来实现部署，不仅支持负载均衡，还能实现热重启。这里贴一段 PM2 配置文件，使用 <code>pm2 start app.json</code> 就可以顺畅体验了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\">&#123;<br>  <span class=\"hljs-string\">&quot;apps&quot;</span>: [<br>    &#123;<br>      <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;TelegramBot&quot;</span>,<br>      <span class=\"hljs-string\">&quot;script&quot;</span>: <span class=\"hljs-string\">&quot;./server/index.js&quot;</span>,<br>      <span class=\"hljs-string\">&quot;env&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;NODE_ENV&quot;</span>: <span class=\"hljs-string\">&quot;production&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"使用 Git Hook 部署 Hexo 到 VPS","date":"2018-04-14T08:17:24.000Z","index_img":"/img/deploy-hexo-with-git-hook/banner.png","_content":"\n装好 Hexo 以后，总是忍不住写点什么，刚好想到可以把自动部署的过程拿出来说一下。网上很多教程都是教你如何将 Hexo 部署到 `Github Pages` 上，但是今天要说的是把 Hexo 部署到自己的 VPS 上，参考了一些教程，写一个我觉得不错的办法。\n\n<!-- more -->\n\n### 配置 VPS 的 Git 环境\n\n由于我的 VPS 上是 `Ubuntu 18.04`，所以说下我的步骤，其他系统类似。\n\n### 第一步\n\n安装 Git:\n\n```bash\n$ apt-get install git\n```\n\n### 第二步\n\n设置 SSH 通过密钥登录，具体步骤可以参考[这里](https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/)\n\n### 第三步\n\n初始化 Git 仓库，我将其放在 `/root/hexobot/blog.git` 目录下：\n\n```bash\n$ mkdir /root/hexobot && cd /root/hexobot\n$ git init --bare blog.git\n```\n\n使用 --bare 参数，Git 就会创建一个裸仓库，裸仓库没有工作区。\n\n### 第四步\n\n配置 `Git Hooks`，详情可参考[这里](https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90)。这里使用的是 `post-receive`，这个 Hook 会在 git 操作完后被运行。\n\n```bash\n$ cd /root/hexobot/blog.git/hooks\n$ vim post-receive\n```\n\n在 `post-receive` 中写入如下内容：\n\n```bash\n#!/bin/sh\ngit --work-tree=/home/wwwroot/blog --git-dir=/root/hexobot/blog.git checkout -f\n```\n\n注意，`/home/wwwroot/blog` 要换成你自己的部署目录，上面的命令会在每次 push 以后把部署目录更新到最新的版本，当然，不要忘记给这个脚本提升权限。\n\n```bash\n$ chmod +x post-receive\n```\n\n### 本地配置\n\n修改 hexo 目录下的 `_config.yml` 文件，找到 deploy 条目，并修改为：\n\n```bash\ndeploy:\n  type: git\n  repo: git@xxx.xxx.xxx.xxx:/root/hexobot/blog.git\n  branch: master\n```\n\n要注意换成你自己的服务器地址，以及服务器端 git 仓库的目录。至此，我们的 hexo 自动部署已经全部配置好了。\n\n> 有些情况下，hexo-deployer-git 没有被安装，请自行安装。\n\n### 使用\n\n```bash\n$ hexo new \"post\"\n\n# write something ....\n\n$ hexo clean && hexo g -d\n```\n\n当然了，如果你是 zsh 用户，你还可以将这个 alias 加入 `~/.zshrc` 中：\n\n```bash\nalias Post='hexo clean && hexo g -d'\n```\n\nFinally，just enjoy~\n","source":"_posts/deploy-hexo-with-git-hook.md","raw":"---\ntitle: 使用 Git Hook 部署 Hexo 到 VPS\ndate: 2018-04-14 16:17:24\ncategories:\n  - Unix\ntags:\n  - Hexo\nindex_img: /img/deploy-hexo-with-git-hook/banner.png\n---\n\n装好 Hexo 以后，总是忍不住写点什么，刚好想到可以把自动部署的过程拿出来说一下。网上很多教程都是教你如何将 Hexo 部署到 `Github Pages` 上，但是今天要说的是把 Hexo 部署到自己的 VPS 上，参考了一些教程，写一个我觉得不错的办法。\n\n<!-- more -->\n\n### 配置 VPS 的 Git 环境\n\n由于我的 VPS 上是 `Ubuntu 18.04`，所以说下我的步骤，其他系统类似。\n\n### 第一步\n\n安装 Git:\n\n```bash\n$ apt-get install git\n```\n\n### 第二步\n\n设置 SSH 通过密钥登录，具体步骤可以参考[这里](https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/)\n\n### 第三步\n\n初始化 Git 仓库，我将其放在 `/root/hexobot/blog.git` 目录下：\n\n```bash\n$ mkdir /root/hexobot && cd /root/hexobot\n$ git init --bare blog.git\n```\n\n使用 --bare 参数，Git 就会创建一个裸仓库，裸仓库没有工作区。\n\n### 第四步\n\n配置 `Git Hooks`，详情可参考[这里](https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90)。这里使用的是 `post-receive`，这个 Hook 会在 git 操作完后被运行。\n\n```bash\n$ cd /root/hexobot/blog.git/hooks\n$ vim post-receive\n```\n\n在 `post-receive` 中写入如下内容：\n\n```bash\n#!/bin/sh\ngit --work-tree=/home/wwwroot/blog --git-dir=/root/hexobot/blog.git checkout -f\n```\n\n注意，`/home/wwwroot/blog` 要换成你自己的部署目录，上面的命令会在每次 push 以后把部署目录更新到最新的版本，当然，不要忘记给这个脚本提升权限。\n\n```bash\n$ chmod +x post-receive\n```\n\n### 本地配置\n\n修改 hexo 目录下的 `_config.yml` 文件，找到 deploy 条目，并修改为：\n\n```bash\ndeploy:\n  type: git\n  repo: git@xxx.xxx.xxx.xxx:/root/hexobot/blog.git\n  branch: master\n```\n\n要注意换成你自己的服务器地址，以及服务器端 git 仓库的目录。至此，我们的 hexo 自动部署已经全部配置好了。\n\n> 有些情况下，hexo-deployer-git 没有被安装，请自行安装。\n\n### 使用\n\n```bash\n$ hexo new \"post\"\n\n# write something ....\n\n$ hexo clean && hexo g -d\n```\n\n当然了，如果你是 zsh 用户，你还可以将这个 alias 加入 `~/.zshrc` 中：\n\n```bash\nalias Post='hexo clean && hexo g -d'\n```\n\nFinally，just enjoy~\n","slug":"deploy-hexo-with-git-hook","published":1,"updated":"2022-08-27T10:26:48.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clejnkd4w0007uoqr5l8d0h3m","content":"<p>装好 Hexo 以后，总是忍不住写点什么，刚好想到可以把自动部署的过程拿出来说一下。网上很多教程都是教你如何将 Hexo 部署到 <code>Github Pages</code> 上，但是今天要说的是把 Hexo 部署到自己的 VPS 上，参考了一些教程，写一个我觉得不错的办法。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"配置-VPS-的-Git-环境\"><a href=\"#配置-VPS-的-Git-环境\" class=\"headerlink\" title=\"配置 VPS 的 Git 环境\"></a>配置 VPS 的 Git 环境</h3><p>由于我的 VPS 上是 <code>Ubuntu 18.04</code>，所以说下我的步骤，其他系统类似。</p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>安装 Git:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ apt-get install git<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>设置 SSH 通过密钥登录，具体步骤可以参考<a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/\">这里</a></p>\n<h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p>初始化 Git 仓库，我将其放在 <code>/root/hexobot/blog.git</code> 目录下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">mkdir</span> /root/hexobot &amp;&amp; <span class=\"hljs-built_in\">cd</span> /root/hexobot<br>$ git init --bare blog.git<br></code></pre></td></tr></table></figure>\n\n<p>使用 –bare 参数，Git 就会创建一个裸仓库，裸仓库没有工作区。</p>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>配置 <code>Git Hooks</code>，详情可参考<a href=\"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90\">这里</a>。这里使用的是 <code>post-receive</code>，这个 Hook 会在 git 操作完后被运行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> /root/hexobot/blog.git/hooks<br>$ vim post-receive<br></code></pre></td></tr></table></figure>\n\n<p>在 <code>post-receive</code> 中写入如下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br>git --work-tree=/home/wwwroot/blog --git-dir=/root/hexobot/blog.git checkout -f<br></code></pre></td></tr></table></figure>\n\n<p>注意，<code>/home/wwwroot/blog</code> 要换成你自己的部署目录，上面的命令会在每次 push 以后把部署目录更新到最新的版本，当然，不要忘记给这个脚本提升权限。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">chmod</span> +x post-receive<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"本地配置\"><a href=\"#本地配置\" class=\"headerlink\" title=\"本地配置\"></a>本地配置</h3><p>修改 hexo 目录下的 <code>_config.yml</code> 文件，找到 deploy 条目，并修改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">deploy:<br>  <span class=\"hljs-built_in\">type</span>: git<br>  repo: git@xxx.xxx.xxx.xxx:/root/hexobot/blog.git<br>  branch: master<br></code></pre></td></tr></table></figure>\n\n<p>要注意换成你自己的服务器地址，以及服务器端 git 仓库的目录。至此，我们的 hexo 自动部署已经全部配置好了。</p>\n<blockquote>\n<p>有些情况下，hexo-deployer-git 没有被安装，请自行安装。</p>\n</blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;post&quot;</span><br><br><span class=\"hljs-comment\"># write something ....</span><br><br>$ hexo clean &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure>\n\n<p>当然了，如果你是 zsh 用户，你还可以将这个 alias 加入 <code>~/.zshrc</code> 中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">alias</span> Post=<span class=\"hljs-string\">&#x27;hexo clean &amp;&amp; hexo g -d&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>Finally，just enjoy~</p>\n","site":{"data":{}},"excerpt":"<p>装好 Hexo 以后，总是忍不住写点什么，刚好想到可以把自动部署的过程拿出来说一下。网上很多教程都是教你如何将 Hexo 部署到 <code>Github Pages</code> 上，但是今天要说的是把 Hexo 部署到自己的 VPS 上，参考了一些教程，写一个我觉得不错的办法。</p>","more":"<h3 id=\"配置-VPS-的-Git-环境\"><a href=\"#配置-VPS-的-Git-环境\" class=\"headerlink\" title=\"配置 VPS 的 Git 环境\"></a>配置 VPS 的 Git 环境</h3><p>由于我的 VPS 上是 <code>Ubuntu 18.04</code>，所以说下我的步骤，其他系统类似。</p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>安装 Git:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ apt-get install git<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>设置 SSH 通过密钥登录，具体步骤可以参考<a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/\">这里</a></p>\n<h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p>初始化 Git 仓库，我将其放在 <code>/root/hexobot/blog.git</code> 目录下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">mkdir</span> /root/hexobot &amp;&amp; <span class=\"hljs-built_in\">cd</span> /root/hexobot<br>$ git init --bare blog.git<br></code></pre></td></tr></table></figure>\n\n<p>使用 –bare 参数，Git 就会创建一个裸仓库，裸仓库没有工作区。</p>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>配置 <code>Git Hooks</code>，详情可参考<a href=\"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90\">这里</a>。这里使用的是 <code>post-receive</code>，这个 Hook 会在 git 操作完后被运行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> /root/hexobot/blog.git/hooks<br>$ vim post-receive<br></code></pre></td></tr></table></figure>\n\n<p>在 <code>post-receive</code> 中写入如下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br>git --work-tree=/home/wwwroot/blog --git-dir=/root/hexobot/blog.git checkout -f<br></code></pre></td></tr></table></figure>\n\n<p>注意，<code>/home/wwwroot/blog</code> 要换成你自己的部署目录，上面的命令会在每次 push 以后把部署目录更新到最新的版本，当然，不要忘记给这个脚本提升权限。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">chmod</span> +x post-receive<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"本地配置\"><a href=\"#本地配置\" class=\"headerlink\" title=\"本地配置\"></a>本地配置</h3><p>修改 hexo 目录下的 <code>_config.yml</code> 文件，找到 deploy 条目，并修改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">deploy:<br>  <span class=\"hljs-built_in\">type</span>: git<br>  repo: git@xxx.xxx.xxx.xxx:/root/hexobot/blog.git<br>  branch: master<br></code></pre></td></tr></table></figure>\n\n<p>要注意换成你自己的服务器地址，以及服务器端 git 仓库的目录。至此，我们的 hexo 自动部署已经全部配置好了。</p>\n<blockquote>\n<p>有些情况下，hexo-deployer-git 没有被安装，请自行安装。</p>\n</blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;post&quot;</span><br><br><span class=\"hljs-comment\"># write something ....</span><br><br>$ hexo clean &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure>\n\n<p>当然了，如果你是 zsh 用户，你还可以将这个 alias 加入 <code>~/.zshrc</code> 中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">alias</span> Post=<span class=\"hljs-string\">&#x27;hexo clean &amp;&amp; hexo g -d&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>Finally，just enjoy~</p>"},{"title":"PSN 游戏下载更新加速方案","date":"2019-01-27T11:25:40.000Z","index_img":"/img/psn-game-boost-plan/banner.png","_content":"\n作为一个主机玩家，最头疼的地方还是 PS4 系统更新和游戏下载的速度。早前由于索尼并没有在国内部署 PSN 下载服务的 CDN，所以下载速度捉急。但是现在国内的大部分 DNS 服务商都能正确的将 PSN 的相关域名解析到国内的服务器上，但是偶尔还是会出现一些问题，今天就来聊下相关的解决办法。\n\n<!-- more -->\n\n### 须知\n\nPSN 的游戏和更新都是通过 `gs2.ww.prod.dl.playstation.net` 这个域名，同时索尼也在他的各个主要市场地区部署了同样的镜像服务器。\n\n早前国内由于没有部署 CDN，所以很多玩家都是通过 `PSX Download Helper` 这个软件将游戏下载到电脑上然后在转移到 PS 中，相关教程可以看这里\n\n到后来国行的 PS 发布之后，国内的 DNS 服务商基本都能正确解析 `gs2.ww.prod.dl.playstation.net` 了，这样普通玩家不需要任何操作都能实现高速下载了。\n\n### 问题\n\n- 国内 DNS 服务器仍然会把 `gs2.ww.prod.dl.playstation.net` 解析到国外导致下载变慢，不仅仅是运营商的 DNS 解析，包括一些公共的 DNS 解析如 114 和腾讯 DNS 都偶尔会出现这种问题。\n\n- 某些 PSN 游戏，就算 DNS 服务器给出了国内 IP 仍然下载速度很慢。\n\n- 部分游戏采用的是热更新即游戏内更新，这种情况由于更新是从游戏厂家自己的服务器来的，并不在 PSN 服务器上，所以速度仍会不理想。\n\n### 解决办法\n\n一般来说以上情况有几种解决办法，如下：\n\n- 使用运营商提供的精品线路如精品网。\n\n- 使用某些游戏加速器服务商提供的加速宝，例如奇游提供的联机宝。\n\n- 购买能够刷固件的路由器，并在路由器上安装 SS、SSR 这种代理服务。\n\n一般来说，2 和 3 都是比较好的解决办法，今天我们聊下第三种解决办法。\n\n我个人是购买了网件的 R7000 然后刷了梅林固件，市面上也有很多路由器能刷类似 OpenWrt 或者 Padavan 这些固件的，推荐去搜索一下相关内容。\n\n### 原理\n\n一般来说，路由器上装好了 SS 之类的代理服务之后，都会提供 Dnsmasq 的功能，这是一个开源项目，它能够提供 DNS 服务，让路由器优先使用本地自定义的 DNS。\n\n例如下图的 DNS 转发 中设置为 `/gs2.ww.prod.dl.playstation.net/119.29.29.29` 的意思就是将 PSN 的下载服务器地址交给 `119.29.29.29` 来解析，而这个 DNS 服务器是腾讯提供的巩固 DNS 服务器。这样的话基本能保证每次都能获得正确的国内的下载地址。\n\n![](https://s1.ax1x.com/2018/05/01/CJwt3t.png)\n\n具体的设定可以参考这里，如果你在国外，也可以通过这种方式来指定 DNS 服务器。\n\n当然，如果你想或者最佳的下载节点，你也可以通过 nslookup 命令来查找最佳的下载节点，比如在 PowerShell 或者 Terminal 中输入 `nslookup gs2.ww.prod.dl.playstation.net 119.29.29.29` 就能获得如下结果（有简化）：\n\n```Bash\nServer:\t\t114.114.114.114\nAddress:\t114.114.114.114#53\n\nName:\ta1796.cn.w.tl88.net\nAddress: 118.123.105.16\nName:\ta1796.cn.w.tl88.net\nAddress: 118.123.105.17\n```\n\n图中的 `118.123.105.16` 和 `118.123.105.17` 就是腾讯公共 DNS 服务器给出的它认为最好的 PSN 下载服务器的地址，然后你可以通过 Ping 来测试这两个地址的延迟。如果你想测试其他的 DNS 服务器，只要按以上步骤去做就好，然后将你觉得最好的设置到 DNS 转发中即可。\n","source":"_posts/psn-game-boost-plan.md","raw":"---\ntitle: PSN 游戏下载更新加速方案\ndate: 2019-01-27 19:25:40\ncategories:\n  - Life\ntags:\n  - Network\nindex_img: /img/psn-game-boost-plan/banner.png\n---\n\n作为一个主机玩家，最头疼的地方还是 PS4 系统更新和游戏下载的速度。早前由于索尼并没有在国内部署 PSN 下载服务的 CDN，所以下载速度捉急。但是现在国内的大部分 DNS 服务商都能正确的将 PSN 的相关域名解析到国内的服务器上，但是偶尔还是会出现一些问题，今天就来聊下相关的解决办法。\n\n<!-- more -->\n\n### 须知\n\nPSN 的游戏和更新都是通过 `gs2.ww.prod.dl.playstation.net` 这个域名，同时索尼也在他的各个主要市场地区部署了同样的镜像服务器。\n\n早前国内由于没有部署 CDN，所以很多玩家都是通过 `PSX Download Helper` 这个软件将游戏下载到电脑上然后在转移到 PS 中，相关教程可以看这里\n\n到后来国行的 PS 发布之后，国内的 DNS 服务商基本都能正确解析 `gs2.ww.prod.dl.playstation.net` 了，这样普通玩家不需要任何操作都能实现高速下载了。\n\n### 问题\n\n- 国内 DNS 服务器仍然会把 `gs2.ww.prod.dl.playstation.net` 解析到国外导致下载变慢，不仅仅是运营商的 DNS 解析，包括一些公共的 DNS 解析如 114 和腾讯 DNS 都偶尔会出现这种问题。\n\n- 某些 PSN 游戏，就算 DNS 服务器给出了国内 IP 仍然下载速度很慢。\n\n- 部分游戏采用的是热更新即游戏内更新，这种情况由于更新是从游戏厂家自己的服务器来的，并不在 PSN 服务器上，所以速度仍会不理想。\n\n### 解决办法\n\n一般来说以上情况有几种解决办法，如下：\n\n- 使用运营商提供的精品线路如精品网。\n\n- 使用某些游戏加速器服务商提供的加速宝，例如奇游提供的联机宝。\n\n- 购买能够刷固件的路由器，并在路由器上安装 SS、SSR 这种代理服务。\n\n一般来说，2 和 3 都是比较好的解决办法，今天我们聊下第三种解决办法。\n\n我个人是购买了网件的 R7000 然后刷了梅林固件，市面上也有很多路由器能刷类似 OpenWrt 或者 Padavan 这些固件的，推荐去搜索一下相关内容。\n\n### 原理\n\n一般来说，路由器上装好了 SS 之类的代理服务之后，都会提供 Dnsmasq 的功能，这是一个开源项目，它能够提供 DNS 服务，让路由器优先使用本地自定义的 DNS。\n\n例如下图的 DNS 转发 中设置为 `/gs2.ww.prod.dl.playstation.net/119.29.29.29` 的意思就是将 PSN 的下载服务器地址交给 `119.29.29.29` 来解析，而这个 DNS 服务器是腾讯提供的巩固 DNS 服务器。这样的话基本能保证每次都能获得正确的国内的下载地址。\n\n![](https://s1.ax1x.com/2018/05/01/CJwt3t.png)\n\n具体的设定可以参考这里，如果你在国外，也可以通过这种方式来指定 DNS 服务器。\n\n当然，如果你想或者最佳的下载节点，你也可以通过 nslookup 命令来查找最佳的下载节点，比如在 PowerShell 或者 Terminal 中输入 `nslookup gs2.ww.prod.dl.playstation.net 119.29.29.29` 就能获得如下结果（有简化）：\n\n```Bash\nServer:\t\t114.114.114.114\nAddress:\t114.114.114.114#53\n\nName:\ta1796.cn.w.tl88.net\nAddress: 118.123.105.16\nName:\ta1796.cn.w.tl88.net\nAddress: 118.123.105.17\n```\n\n图中的 `118.123.105.16` 和 `118.123.105.17` 就是腾讯公共 DNS 服务器给出的它认为最好的 PSN 下载服务器的地址，然后你可以通过 Ping 来测试这两个地址的延迟。如果你想测试其他的 DNS 服务器，只要按以上步骤去做就好，然后将你觉得最好的设置到 DNS 转发中即可。\n","slug":"psn-game-boost-plan","published":1,"updated":"2022-08-27T10:26:48.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clejnkd4w0008uoqr3lrzgc97","content":"<p>作为一个主机玩家，最头疼的地方还是 PS4 系统更新和游戏下载的速度。早前由于索尼并没有在国内部署 PSN 下载服务的 CDN，所以下载速度捉急。但是现在国内的大部分 DNS 服务商都能正确的将 PSN 的相关域名解析到国内的服务器上，但是偶尔还是会出现一些问题，今天就来聊下相关的解决办法。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"须知\"><a href=\"#须知\" class=\"headerlink\" title=\"须知\"></a>须知</h3><p>PSN 的游戏和更新都是通过 <code>gs2.ww.prod.dl.playstation.net</code> 这个域名，同时索尼也在他的各个主要市场地区部署了同样的镜像服务器。</p>\n<p>早前国内由于没有部署 CDN，所以很多玩家都是通过 <code>PSX Download Helper</code> 这个软件将游戏下载到电脑上然后在转移到 PS 中，相关教程可以看这里</p>\n<p>到后来国行的 PS 发布之后，国内的 DNS 服务商基本都能正确解析 <code>gs2.ww.prod.dl.playstation.net</code> 了，这样普通玩家不需要任何操作都能实现高速下载了。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ul>\n<li><p>国内 DNS 服务器仍然会把 <code>gs2.ww.prod.dl.playstation.net</code> 解析到国外导致下载变慢，不仅仅是运营商的 DNS 解析，包括一些公共的 DNS 解析如 114 和腾讯 DNS 都偶尔会出现这种问题。</p>\n</li>\n<li><p>某些 PSN 游戏，就算 DNS 服务器给出了国内 IP 仍然下载速度很慢。</p>\n</li>\n<li><p>部分游戏采用的是热更新即游戏内更新，这种情况由于更新是从游戏厂家自己的服务器来的，并不在 PSN 服务器上，所以速度仍会不理想。</p>\n</li>\n</ul>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>一般来说以上情况有几种解决办法，如下：</p>\n<ul>\n<li><p>使用运营商提供的精品线路如精品网。</p>\n</li>\n<li><p>使用某些游戏加速器服务商提供的加速宝，例如奇游提供的联机宝。</p>\n</li>\n<li><p>购买能够刷固件的路由器，并在路由器上安装 SS、SSR 这种代理服务。</p>\n</li>\n</ul>\n<p>一般来说，2 和 3 都是比较好的解决办法，今天我们聊下第三种解决办法。</p>\n<p>我个人是购买了网件的 R7000 然后刷了梅林固件，市面上也有很多路由器能刷类似 OpenWrt 或者 Padavan 这些固件的，推荐去搜索一下相关内容。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>一般来说，路由器上装好了 SS 之类的代理服务之后，都会提供 Dnsmasq 的功能，这是一个开源项目，它能够提供 DNS 服务，让路由器优先使用本地自定义的 DNS。</p>\n<p>例如下图的 DNS 转发 中设置为 <code>/gs2.ww.prod.dl.playstation.net/119.29.29.29</code> 的意思就是将 PSN 的下载服务器地址交给 <code>119.29.29.29</code> 来解析，而这个 DNS 服务器是腾讯提供的巩固 DNS 服务器。这样的话基本能保证每次都能获得正确的国内的下载地址。</p>\n<p><img src=\"https://s1.ax1x.com/2018/05/01/CJwt3t.png\"></p>\n<p>具体的设定可以参考这里，如果你在国外，也可以通过这种方式来指定 DNS 服务器。</p>\n<p>当然，如果你想或者最佳的下载节点，你也可以通过 nslookup 命令来查找最佳的下载节点，比如在 PowerShell 或者 Terminal 中输入 <code>nslookup gs2.ww.prod.dl.playstation.net 119.29.29.29</code> 就能获得如下结果（有简化）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">Server:\t\t114.114.114.114<br>Address:\t114.114.114.114<span class=\"hljs-comment\">#53</span><br><br>Name:\ta1796.cn.w.tl88.net<br>Address: 118.123.105.16<br>Name:\ta1796.cn.w.tl88.net<br>Address: 118.123.105.17<br></code></pre></td></tr></table></figure>\n\n<p>图中的 <code>118.123.105.16</code> 和 <code>118.123.105.17</code> 就是腾讯公共 DNS 服务器给出的它认为最好的 PSN 下载服务器的地址，然后你可以通过 Ping 来测试这两个地址的延迟。如果你想测试其他的 DNS 服务器，只要按以上步骤去做就好，然后将你觉得最好的设置到 DNS 转发中即可。</p>\n","site":{"data":{}},"excerpt":"<p>作为一个主机玩家，最头疼的地方还是 PS4 系统更新和游戏下载的速度。早前由于索尼并没有在国内部署 PSN 下载服务的 CDN，所以下载速度捉急。但是现在国内的大部分 DNS 服务商都能正确的将 PSN 的相关域名解析到国内的服务器上，但是偶尔还是会出现一些问题，今天就来聊下相关的解决办法。</p>","more":"<h3 id=\"须知\"><a href=\"#须知\" class=\"headerlink\" title=\"须知\"></a>须知</h3><p>PSN 的游戏和更新都是通过 <code>gs2.ww.prod.dl.playstation.net</code> 这个域名，同时索尼也在他的各个主要市场地区部署了同样的镜像服务器。</p>\n<p>早前国内由于没有部署 CDN，所以很多玩家都是通过 <code>PSX Download Helper</code> 这个软件将游戏下载到电脑上然后在转移到 PS 中，相关教程可以看这里</p>\n<p>到后来国行的 PS 发布之后，国内的 DNS 服务商基本都能正确解析 <code>gs2.ww.prod.dl.playstation.net</code> 了，这样普通玩家不需要任何操作都能实现高速下载了。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ul>\n<li><p>国内 DNS 服务器仍然会把 <code>gs2.ww.prod.dl.playstation.net</code> 解析到国外导致下载变慢，不仅仅是运营商的 DNS 解析，包括一些公共的 DNS 解析如 114 和腾讯 DNS 都偶尔会出现这种问题。</p>\n</li>\n<li><p>某些 PSN 游戏，就算 DNS 服务器给出了国内 IP 仍然下载速度很慢。</p>\n</li>\n<li><p>部分游戏采用的是热更新即游戏内更新，这种情况由于更新是从游戏厂家自己的服务器来的，并不在 PSN 服务器上，所以速度仍会不理想。</p>\n</li>\n</ul>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>一般来说以上情况有几种解决办法，如下：</p>\n<ul>\n<li><p>使用运营商提供的精品线路如精品网。</p>\n</li>\n<li><p>使用某些游戏加速器服务商提供的加速宝，例如奇游提供的联机宝。</p>\n</li>\n<li><p>购买能够刷固件的路由器，并在路由器上安装 SS、SSR 这种代理服务。</p>\n</li>\n</ul>\n<p>一般来说，2 和 3 都是比较好的解决办法，今天我们聊下第三种解决办法。</p>\n<p>我个人是购买了网件的 R7000 然后刷了梅林固件，市面上也有很多路由器能刷类似 OpenWrt 或者 Padavan 这些固件的，推荐去搜索一下相关内容。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>一般来说，路由器上装好了 SS 之类的代理服务之后，都会提供 Dnsmasq 的功能，这是一个开源项目，它能够提供 DNS 服务，让路由器优先使用本地自定义的 DNS。</p>\n<p>例如下图的 DNS 转发 中设置为 <code>/gs2.ww.prod.dl.playstation.net/119.29.29.29</code> 的意思就是将 PSN 的下载服务器地址交给 <code>119.29.29.29</code> 来解析，而这个 DNS 服务器是腾讯提供的巩固 DNS 服务器。这样的话基本能保证每次都能获得正确的国内的下载地址。</p>\n<p><img src=\"https://s1.ax1x.com/2018/05/01/CJwt3t.png\"></p>\n<p>具体的设定可以参考这里，如果你在国外，也可以通过这种方式来指定 DNS 服务器。</p>\n<p>当然，如果你想或者最佳的下载节点，你也可以通过 nslookup 命令来查找最佳的下载节点，比如在 PowerShell 或者 Terminal 中输入 <code>nslookup gs2.ww.prod.dl.playstation.net 119.29.29.29</code> 就能获得如下结果（有简化）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">Server:\t\t114.114.114.114<br>Address:\t114.114.114.114<span class=\"hljs-comment\">#53</span><br><br>Name:\ta1796.cn.w.tl88.net<br>Address: 118.123.105.16<br>Name:\ta1796.cn.w.tl88.net<br>Address: 118.123.105.17<br></code></pre></td></tr></table></figure>\n\n<p>图中的 <code>118.123.105.16</code> 和 <code>118.123.105.17</code> 就是腾讯公共 DNS 服务器给出的它认为最好的 PSN 下载服务器的地址，然后你可以通过 Ping 来测试这两个地址的延迟。如果你想测试其他的 DNS 服务器，只要按以上步骤去做就好，然后将你觉得最好的设置到 DNS 转发中即可。</p>"},{"title":"同源和跨域","date":"2018-10-17T15:16:26.000Z","index_img":"/img/same-origin-and-cross-domain/banner.png","_content":"\n实际开发中，经常会遇到需要发起跨域请求的时候，总的来说还是有不少解决办法的，说到需要跨域的原因就不得不提同源政策了，还有跨域的究极解法 CORS。\n\n<!-- more -->\n\n### 什么是同源政策（`Same-Origin Policy`）\n\n- 协议相同\n\n- 域名相同\n\n- 端口相同\n\n> 只要协议、域名、端口有任何一个不同，都被当作是不同的源。\n\n更详细的解释可以看[这里](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n### 为什么要有同源政策\n\n同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。而且保护用户隐私信息，防止身份伪造等(读取 Cookie)。\n\n### document.domain\n\n对于主域相同，子域不同的情况，可以设置 `document.domain` 来规避同源政策。\n\n```Javascript\n// 对于 blog.tinykid.org 和 dev.tiny.org，可以通过如下设置获取 cookie\ndocument.domain = 'tinykid.org'\n```\n\n### location.hash\n\n这种方式是子框架具有修改父框架 src 的 hash 值，通过这个属性进行传递数据，且更改 hash 值，页面不会刷新。但是传递的数据的字节数是有限的。\n\n```Javascript\n// 父窗口\niframe = document.createElement('iframe')\niframe.style.display = 'none'\nvar state = 0\n\niframe.onload = function() {\n  if (state === 1) {\n    // 获取数据\n    var data = window.location.hash\n    // 销毁 iframe\n    iframe.contentWindow.document.write('')\n    iframe.contentWindow.close()\n    document.body.removeChild(iframe)\n  } else if (state === 0) {\n    state = 1\n    iframe.contentWindow.location = 'http://tinykid.org/xxx.html'\n  }\n}\ndocument.body.appendChild(iframe)\n\n\n// xxx 页面中\nparent.location.hash = \"data\";\n```\n\n### window.postMessage\n\n这个方法是 HTML5 中引入的一个新 API，用于跨域的父子窗口通信，不受同源策略限制。通过它可以实现对存储的读写，DOM 的操作等。\n\n```Javascript\n// 弹出一个新窗口\nvar popup = window.open('http://child.com');\n\n//父窗口向子窗口发送消息\npopup.postMessage('Hello World!', 'http://child.com');\n\n//子窗口向父窗口发送消息\nwindow.opener.postMessage('Nice to see you', 'http://parent.com');\n\n//父子都可以监听 message 事件响应\nwindow.addEventListener('message', function(e) {\n  // do something\n}, false);\n```\n\n### WebSocket\n\nWebSockets 是一个可以创建和服务器间进行双向会话的高级技术。通过这个 API 你可以向服务器发送消息并接受基于事件驱动的响应，这样就不用向服务器轮询获取数据了。更多信息点[这里](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API)。\n\n### JSONP\n\nJSONP 虽然很好用，但是只支持 Get 方法，其思路是 script 标签是没有同源限制的，所以可以利用这点来发起跨域请求。看代码：\n\n```Javascript\n;(function(global) {\n  var id = 0,\n    container = document.getElementsByTagName('head')[0]\n\n  function jsonp(options) {\n    if (!options || !options.url) return\n\n    var scriptNode = document.createElement('script'),\n      data = options.data || {},\n      url = options.url,\n      callback = options.callback,\n      fnName = 'jsonp' + id++\n\n    // 添加回调函数\n    data['callback'] = fnName\n\n    // 拼接url\n    var params = []\n    for (var key in data) {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))\n    }\n    url = url.indexOf('?') > 0 ? url + '&' : url + '?'\n    url += params.join('&')\n    scriptNode.src = url\n\n    // 传递的是一个匿名的回调函数，要执行的话，暴露为一个全局方法\n    global[fnName] = function(ret) {\n      callback && callback(ret)\n      container.removeChild(scriptNode)\n      delete global[fnName]\n    }\n\n    // 出错处理\n    scriptNode.onerror = function() {\n      callback &&\n        callback({\n          error: 'error'\n        })\n      container.removeChild(scriptNode)\n      global[fnName] && delete global[fnName]\n    }\n\n    scriptNode.type = 'text/javascript'\n    container.appendChild(scriptNode)\n  }\n\n  global.jsonp = jsonp\n})(this)\n```\n\n### CORS\n\nCORS 可以说是跨域的究极解法方法，由浏览器自动完成。这个机制允许 Web 应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。浏览器支持在 API 容器中（例如 XMLHttpRequest 或 Fetch ）使用 CORS，以降低跨域 HTTP 请求所带来的风险。具体描述可以看这里。\n\n由于 MDN 已经讲解的非常仔细了，我就说一下注意事项。\n\n对于客户端，需要注意设置 `xhr.withCredentials = true`，不然无法携带 cookie。\n\n对于服务端需要返回两个关键字段，`Access-Control-Allow-Origin` 和 `Access-Control-Allow-Credentials`，这样基本就能顺利完成跨域请求。\n","source":"_posts/same-origin-and-cross-domain.md","raw":"---\ntitle: 同源和跨域\ndate: 2018-10-17 23:16:26\ncategories:\n  - FE\ntags:\n  - Browser\nindex_img: /img/same-origin-and-cross-domain/banner.png\n---\n\n实际开发中，经常会遇到需要发起跨域请求的时候，总的来说还是有不少解决办法的，说到需要跨域的原因就不得不提同源政策了，还有跨域的究极解法 CORS。\n\n<!-- more -->\n\n### 什么是同源政策（`Same-Origin Policy`）\n\n- 协议相同\n\n- 域名相同\n\n- 端口相同\n\n> 只要协议、域名、端口有任何一个不同，都被当作是不同的源。\n\n更详细的解释可以看[这里](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n### 为什么要有同源政策\n\n同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。而且保护用户隐私信息，防止身份伪造等(读取 Cookie)。\n\n### document.domain\n\n对于主域相同，子域不同的情况，可以设置 `document.domain` 来规避同源政策。\n\n```Javascript\n// 对于 blog.tinykid.org 和 dev.tiny.org，可以通过如下设置获取 cookie\ndocument.domain = 'tinykid.org'\n```\n\n### location.hash\n\n这种方式是子框架具有修改父框架 src 的 hash 值，通过这个属性进行传递数据，且更改 hash 值，页面不会刷新。但是传递的数据的字节数是有限的。\n\n```Javascript\n// 父窗口\niframe = document.createElement('iframe')\niframe.style.display = 'none'\nvar state = 0\n\niframe.onload = function() {\n  if (state === 1) {\n    // 获取数据\n    var data = window.location.hash\n    // 销毁 iframe\n    iframe.contentWindow.document.write('')\n    iframe.contentWindow.close()\n    document.body.removeChild(iframe)\n  } else if (state === 0) {\n    state = 1\n    iframe.contentWindow.location = 'http://tinykid.org/xxx.html'\n  }\n}\ndocument.body.appendChild(iframe)\n\n\n// xxx 页面中\nparent.location.hash = \"data\";\n```\n\n### window.postMessage\n\n这个方法是 HTML5 中引入的一个新 API，用于跨域的父子窗口通信，不受同源策略限制。通过它可以实现对存储的读写，DOM 的操作等。\n\n```Javascript\n// 弹出一个新窗口\nvar popup = window.open('http://child.com');\n\n//父窗口向子窗口发送消息\npopup.postMessage('Hello World!', 'http://child.com');\n\n//子窗口向父窗口发送消息\nwindow.opener.postMessage('Nice to see you', 'http://parent.com');\n\n//父子都可以监听 message 事件响应\nwindow.addEventListener('message', function(e) {\n  // do something\n}, false);\n```\n\n### WebSocket\n\nWebSockets 是一个可以创建和服务器间进行双向会话的高级技术。通过这个 API 你可以向服务器发送消息并接受基于事件驱动的响应，这样就不用向服务器轮询获取数据了。更多信息点[这里](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API)。\n\n### JSONP\n\nJSONP 虽然很好用，但是只支持 Get 方法，其思路是 script 标签是没有同源限制的，所以可以利用这点来发起跨域请求。看代码：\n\n```Javascript\n;(function(global) {\n  var id = 0,\n    container = document.getElementsByTagName('head')[0]\n\n  function jsonp(options) {\n    if (!options || !options.url) return\n\n    var scriptNode = document.createElement('script'),\n      data = options.data || {},\n      url = options.url,\n      callback = options.callback,\n      fnName = 'jsonp' + id++\n\n    // 添加回调函数\n    data['callback'] = fnName\n\n    // 拼接url\n    var params = []\n    for (var key in data) {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))\n    }\n    url = url.indexOf('?') > 0 ? url + '&' : url + '?'\n    url += params.join('&')\n    scriptNode.src = url\n\n    // 传递的是一个匿名的回调函数，要执行的话，暴露为一个全局方法\n    global[fnName] = function(ret) {\n      callback && callback(ret)\n      container.removeChild(scriptNode)\n      delete global[fnName]\n    }\n\n    // 出错处理\n    scriptNode.onerror = function() {\n      callback &&\n        callback({\n          error: 'error'\n        })\n      container.removeChild(scriptNode)\n      global[fnName] && delete global[fnName]\n    }\n\n    scriptNode.type = 'text/javascript'\n    container.appendChild(scriptNode)\n  }\n\n  global.jsonp = jsonp\n})(this)\n```\n\n### CORS\n\nCORS 可以说是跨域的究极解法方法，由浏览器自动完成。这个机制允许 Web 应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。浏览器支持在 API 容器中（例如 XMLHttpRequest 或 Fetch ）使用 CORS，以降低跨域 HTTP 请求所带来的风险。具体描述可以看这里。\n\n由于 MDN 已经讲解的非常仔细了，我就说一下注意事项。\n\n对于客户端，需要注意设置 `xhr.withCredentials = true`，不然无法携带 cookie。\n\n对于服务端需要返回两个关键字段，`Access-Control-Allow-Origin` 和 `Access-Control-Allow-Credentials`，这样基本就能顺利完成跨域请求。\n","slug":"same-origin-and-cross-domain","published":1,"updated":"2022-08-27T10:26:48.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clejnkd4x000auoqrfdpv8z9t","content":"<p>实际开发中，经常会遇到需要发起跨域请求的时候，总的来说还是有不少解决办法的，说到需要跨域的原因就不得不提同源政策了，还有跨域的究极解法 CORS。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"什么是同源政策（Same-Origin-Policy）\"><a href=\"#什么是同源政策（Same-Origin-Policy）\" class=\"headerlink\" title=\"什么是同源政策（Same-Origin Policy）\"></a>什么是同源政策（<code>Same-Origin Policy</code>）</h3><ul>\n<li><p>协议相同</p>\n</li>\n<li><p>域名相同</p>\n</li>\n<li><p>端口相同</p>\n</li>\n</ul>\n<blockquote>\n<p>只要协议、域名、端口有任何一个不同，都被当作是不同的源。</p>\n</blockquote>\n<p>更详细的解释可以看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\">这里</a></p>\n<h3 id=\"为什么要有同源政策\"><a href=\"#为什么要有同源政策\" class=\"headerlink\" title=\"为什么要有同源政策\"></a>为什么要有同源政策</h3><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。而且保护用户隐私信息，防止身份伪造等(读取 Cookie)。</p>\n<h3 id=\"document-domain\"><a href=\"#document-domain\" class=\"headerlink\" title=\"document.domain\"></a>document.domain</h3><p>对于主域相同，子域不同的情况，可以设置 <code>document.domain</code> 来规避同源政策。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// 对于 blog.tinykid.org 和 dev.tiny.org，可以通过如下设置获取 cookie</span><br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">domain</span> = <span class=\"hljs-string\">&#x27;tinykid.org&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"location-hash\"><a href=\"#location-hash\" class=\"headerlink\" title=\"location.hash\"></a>location.hash</h3><p>这种方式是子框架具有修改父框架 src 的 hash 值，通过这个属性进行传递数据，且更改 hash 值，页面不会刷新。但是传递的数据的字节数是有限的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// 父窗口</span><br>iframe = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;iframe&#x27;</span>)<br>iframe.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&#x27;none&#x27;</span><br><span class=\"hljs-keyword\">var</span> state = <span class=\"hljs-number\">0</span><br><br>iframe.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (state === <span class=\"hljs-number\">1</span>) &#123;<br>    <span class=\"hljs-comment\">// 获取数据</span><br>    <span class=\"hljs-keyword\">var</span> data = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">hash</span><br>    <span class=\"hljs-comment\">// 销毁 iframe</span><br>    iframe.<span class=\"hljs-property\">contentWindow</span>.<span class=\"hljs-property\">document</span>.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)<br>    iframe.<span class=\"hljs-property\">contentWindow</span>.<span class=\"hljs-title function_\">close</span>()<br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(iframe)<br>  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (state === <span class=\"hljs-number\">0</span>) &#123;<br>    state = <span class=\"hljs-number\">1</span><br>    iframe.<span class=\"hljs-property\">contentWindow</span>.<span class=\"hljs-property\">location</span> = <span class=\"hljs-string\">&#x27;http://tinykid.org/xxx.html&#x27;</span><br>  &#125;<br>&#125;<br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(iframe)<br><br><br><span class=\"hljs-comment\">// xxx 页面中</span><br>parent.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">hash</span> = <span class=\"hljs-string\">&quot;data&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"window-postMessage\"><a href=\"#window-postMessage\" class=\"headerlink\" title=\"window.postMessage\"></a>window.postMessage</h3><p>这个方法是 HTML5 中引入的一个新 API，用于跨域的父子窗口通信，不受同源策略限制。通过它可以实现对存储的读写，DOM 的操作等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// 弹出一个新窗口</span><br><span class=\"hljs-keyword\">var</span> popup = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&#x27;http://child.com&#x27;</span>);<br><br><span class=\"hljs-comment\">//父窗口向子窗口发送消息</span><br>popup.<span class=\"hljs-title function_\">postMessage</span>(<span class=\"hljs-string\">&#x27;Hello World!&#x27;</span>, <span class=\"hljs-string\">&#x27;http://child.com&#x27;</span>);<br><br><span class=\"hljs-comment\">//子窗口向父窗口发送消息</span><br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">opener</span>.<span class=\"hljs-title function_\">postMessage</span>(<span class=\"hljs-string\">&#x27;Nice to see you&#x27;</span>, <span class=\"hljs-string\">&#x27;http://parent.com&#x27;</span>);<br><br><span class=\"hljs-comment\">//父子都可以监听 message 事件响应</span><br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;message&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) &#123;<br>  <span class=\"hljs-comment\">// do something</span><br>&#125;, <span class=\"hljs-literal\">false</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><p>WebSockets 是一个可以创建和服务器间进行双向会话的高级技术。通过这个 API 你可以向服务器发送消息并接受基于事件驱动的响应，这样就不用向服务器轮询获取数据了。更多信息点<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API\">这里</a>。</p>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>JSONP 虽然很好用，但是只支持 Get 方法，其思路是 script 标签是没有同源限制的，所以可以利用这点来发起跨域请求。看代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\">;(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-variable language_\">global</span></span>) &#123;<br>  <span class=\"hljs-keyword\">var</span> id = <span class=\"hljs-number\">0</span>,<br>    container = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;head&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br><br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">jsonp</span>(<span class=\"hljs-params\">options</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!options || !options.<span class=\"hljs-property\">url</span>) <span class=\"hljs-keyword\">return</span><br><br>    <span class=\"hljs-keyword\">var</span> scriptNode = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;script&#x27;</span>),<br>      data = options.<span class=\"hljs-property\">data</span> || &#123;&#125;,<br>      url = options.<span class=\"hljs-property\">url</span>,<br>      callback = options.<span class=\"hljs-property\">callback</span>,<br>      fnName = <span class=\"hljs-string\">&#x27;jsonp&#x27;</span> + id++<br><br>    <span class=\"hljs-comment\">// 添加回调函数</span><br>    data[<span class=\"hljs-string\">&#x27;callback&#x27;</span>] = fnName<br><br>    <span class=\"hljs-comment\">// 拼接url</span><br>    <span class=\"hljs-keyword\">var</span> params = []<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> key <span class=\"hljs-keyword\">in</span> data) &#123;<br>      params.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-built_in\">encodeURIComponent</span>(key) + <span class=\"hljs-string\">&#x27;=&#x27;</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(data[key]))<br>    &#125;<br>    url = url.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&#x27;?&#x27;</span>) &gt; <span class=\"hljs-number\">0</span> ? url + <span class=\"hljs-string\">&#x27;&amp;&#x27;</span> : url + <span class=\"hljs-string\">&#x27;?&#x27;</span><br>    url += params.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&amp;&#x27;</span>)<br>    scriptNode.<span class=\"hljs-property\">src</span> = url<br><br>    <span class=\"hljs-comment\">// 传递的是一个匿名的回调函数，要执行的话，暴露为一个全局方法</span><br>    <span class=\"hljs-variable language_\">global</span>[fnName] = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ret</span>) &#123;<br>      callback &amp;&amp; <span class=\"hljs-title function_\">callback</span>(ret)<br>      container.<span class=\"hljs-title function_\">removeChild</span>(scriptNode)<br>      <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-variable language_\">global</span>[fnName]<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 出错处理</span><br>    scriptNode.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>      callback &amp;&amp;<br>        <span class=\"hljs-title function_\">callback</span>(&#123;<br>          <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">&#x27;error&#x27;</span><br>        &#125;)<br>      container.<span class=\"hljs-title function_\">removeChild</span>(scriptNode)<br>      <span class=\"hljs-variable language_\">global</span>[fnName] &amp;&amp; <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-variable language_\">global</span>[fnName]<br>    &#125;<br><br>    scriptNode.<span class=\"hljs-property\">type</span> = <span class=\"hljs-string\">&#x27;text/javascript&#x27;</span><br>    container.<span class=\"hljs-title function_\">appendChild</span>(scriptNode)<br>  &#125;<br><br>  <span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">jsonp</span> = jsonp<br>&#125;)(<span class=\"hljs-variable language_\">this</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><p>CORS 可以说是跨域的究极解法方法，由浏览器自动完成。这个机制允许 Web 应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。浏览器支持在 API 容器中（例如 XMLHttpRequest 或 Fetch ）使用 CORS，以降低跨域 HTTP 请求所带来的风险。具体描述可以看这里。</p>\n<p>由于 MDN 已经讲解的非常仔细了，我就说一下注意事项。</p>\n<p>对于客户端，需要注意设置 <code>xhr.withCredentials = true</code>，不然无法携带 cookie。</p>\n<p>对于服务端需要返回两个关键字段，<code>Access-Control-Allow-Origin</code> 和 <code>Access-Control-Allow-Credentials</code>，这样基本就能顺利完成跨域请求。</p>\n","site":{"data":{}},"excerpt":"<p>实际开发中，经常会遇到需要发起跨域请求的时候，总的来说还是有不少解决办法的，说到需要跨域的原因就不得不提同源政策了，还有跨域的究极解法 CORS。</p>","more":"<h3 id=\"什么是同源政策（Same-Origin-Policy）\"><a href=\"#什么是同源政策（Same-Origin-Policy）\" class=\"headerlink\" title=\"什么是同源政策（Same-Origin Policy）\"></a>什么是同源政策（<code>Same-Origin Policy</code>）</h3><ul>\n<li><p>协议相同</p>\n</li>\n<li><p>域名相同</p>\n</li>\n<li><p>端口相同</p>\n</li>\n</ul>\n<blockquote>\n<p>只要协议、域名、端口有任何一个不同，都被当作是不同的源。</p>\n</blockquote>\n<p>更详细的解释可以看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\">这里</a></p>\n<h3 id=\"为什么要有同源政策\"><a href=\"#为什么要有同源政策\" class=\"headerlink\" title=\"为什么要有同源政策\"></a>为什么要有同源政策</h3><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。而且保护用户隐私信息，防止身份伪造等(读取 Cookie)。</p>\n<h3 id=\"document-domain\"><a href=\"#document-domain\" class=\"headerlink\" title=\"document.domain\"></a>document.domain</h3><p>对于主域相同，子域不同的情况，可以设置 <code>document.domain</code> 来规避同源政策。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// 对于 blog.tinykid.org 和 dev.tiny.org，可以通过如下设置获取 cookie</span><br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">domain</span> = <span class=\"hljs-string\">&#x27;tinykid.org&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"location-hash\"><a href=\"#location-hash\" class=\"headerlink\" title=\"location.hash\"></a>location.hash</h3><p>这种方式是子框架具有修改父框架 src 的 hash 值，通过这个属性进行传递数据，且更改 hash 值，页面不会刷新。但是传递的数据的字节数是有限的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// 父窗口</span><br>iframe = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;iframe&#x27;</span>)<br>iframe.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&#x27;none&#x27;</span><br><span class=\"hljs-keyword\">var</span> state = <span class=\"hljs-number\">0</span><br><br>iframe.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (state === <span class=\"hljs-number\">1</span>) &#123;<br>    <span class=\"hljs-comment\">// 获取数据</span><br>    <span class=\"hljs-keyword\">var</span> data = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">hash</span><br>    <span class=\"hljs-comment\">// 销毁 iframe</span><br>    iframe.<span class=\"hljs-property\">contentWindow</span>.<span class=\"hljs-property\">document</span>.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)<br>    iframe.<span class=\"hljs-property\">contentWindow</span>.<span class=\"hljs-title function_\">close</span>()<br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(iframe)<br>  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (state === <span class=\"hljs-number\">0</span>) &#123;<br>    state = <span class=\"hljs-number\">1</span><br>    iframe.<span class=\"hljs-property\">contentWindow</span>.<span class=\"hljs-property\">location</span> = <span class=\"hljs-string\">&#x27;http://tinykid.org/xxx.html&#x27;</span><br>  &#125;<br>&#125;<br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(iframe)<br><br><br><span class=\"hljs-comment\">// xxx 页面中</span><br>parent.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">hash</span> = <span class=\"hljs-string\">&quot;data&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"window-postMessage\"><a href=\"#window-postMessage\" class=\"headerlink\" title=\"window.postMessage\"></a>window.postMessage</h3><p>这个方法是 HTML5 中引入的一个新 API，用于跨域的父子窗口通信，不受同源策略限制。通过它可以实现对存储的读写，DOM 的操作等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// 弹出一个新窗口</span><br><span class=\"hljs-keyword\">var</span> popup = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&#x27;http://child.com&#x27;</span>);<br><br><span class=\"hljs-comment\">//父窗口向子窗口发送消息</span><br>popup.<span class=\"hljs-title function_\">postMessage</span>(<span class=\"hljs-string\">&#x27;Hello World!&#x27;</span>, <span class=\"hljs-string\">&#x27;http://child.com&#x27;</span>);<br><br><span class=\"hljs-comment\">//子窗口向父窗口发送消息</span><br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">opener</span>.<span class=\"hljs-title function_\">postMessage</span>(<span class=\"hljs-string\">&#x27;Nice to see you&#x27;</span>, <span class=\"hljs-string\">&#x27;http://parent.com&#x27;</span>);<br><br><span class=\"hljs-comment\">//父子都可以监听 message 事件响应</span><br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;message&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) &#123;<br>  <span class=\"hljs-comment\">// do something</span><br>&#125;, <span class=\"hljs-literal\">false</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><p>WebSockets 是一个可以创建和服务器间进行双向会话的高级技术。通过这个 API 你可以向服务器发送消息并接受基于事件驱动的响应，这样就不用向服务器轮询获取数据了。更多信息点<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API\">这里</a>。</p>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>JSONP 虽然很好用，但是只支持 Get 方法，其思路是 script 标签是没有同源限制的，所以可以利用这点来发起跨域请求。看代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\">;(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-variable language_\">global</span></span>) &#123;<br>  <span class=\"hljs-keyword\">var</span> id = <span class=\"hljs-number\">0</span>,<br>    container = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;head&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br><br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">jsonp</span>(<span class=\"hljs-params\">options</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!options || !options.<span class=\"hljs-property\">url</span>) <span class=\"hljs-keyword\">return</span><br><br>    <span class=\"hljs-keyword\">var</span> scriptNode = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;script&#x27;</span>),<br>      data = options.<span class=\"hljs-property\">data</span> || &#123;&#125;,<br>      url = options.<span class=\"hljs-property\">url</span>,<br>      callback = options.<span class=\"hljs-property\">callback</span>,<br>      fnName = <span class=\"hljs-string\">&#x27;jsonp&#x27;</span> + id++<br><br>    <span class=\"hljs-comment\">// 添加回调函数</span><br>    data[<span class=\"hljs-string\">&#x27;callback&#x27;</span>] = fnName<br><br>    <span class=\"hljs-comment\">// 拼接url</span><br>    <span class=\"hljs-keyword\">var</span> params = []<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> key <span class=\"hljs-keyword\">in</span> data) &#123;<br>      params.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-built_in\">encodeURIComponent</span>(key) + <span class=\"hljs-string\">&#x27;=&#x27;</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(data[key]))<br>    &#125;<br>    url = url.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&#x27;?&#x27;</span>) &gt; <span class=\"hljs-number\">0</span> ? url + <span class=\"hljs-string\">&#x27;&amp;&#x27;</span> : url + <span class=\"hljs-string\">&#x27;?&#x27;</span><br>    url += params.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&amp;&#x27;</span>)<br>    scriptNode.<span class=\"hljs-property\">src</span> = url<br><br>    <span class=\"hljs-comment\">// 传递的是一个匿名的回调函数，要执行的话，暴露为一个全局方法</span><br>    <span class=\"hljs-variable language_\">global</span>[fnName] = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ret</span>) &#123;<br>      callback &amp;&amp; <span class=\"hljs-title function_\">callback</span>(ret)<br>      container.<span class=\"hljs-title function_\">removeChild</span>(scriptNode)<br>      <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-variable language_\">global</span>[fnName]<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 出错处理</span><br>    scriptNode.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>      callback &amp;&amp;<br>        <span class=\"hljs-title function_\">callback</span>(&#123;<br>          <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">&#x27;error&#x27;</span><br>        &#125;)<br>      container.<span class=\"hljs-title function_\">removeChild</span>(scriptNode)<br>      <span class=\"hljs-variable language_\">global</span>[fnName] &amp;&amp; <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-variable language_\">global</span>[fnName]<br>    &#125;<br><br>    scriptNode.<span class=\"hljs-property\">type</span> = <span class=\"hljs-string\">&#x27;text/javascript&#x27;</span><br>    container.<span class=\"hljs-title function_\">appendChild</span>(scriptNode)<br>  &#125;<br><br>  <span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">jsonp</span> = jsonp<br>&#125;)(<span class=\"hljs-variable language_\">this</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><p>CORS 可以说是跨域的究极解法方法，由浏览器自动完成。这个机制允许 Web 应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。浏览器支持在 API 容器中（例如 XMLHttpRequest 或 Fetch ）使用 CORS，以降低跨域 HTTP 请求所带来的风险。具体描述可以看这里。</p>\n<p>由于 MDN 已经讲解的非常仔细了，我就说一下注意事项。</p>\n<p>对于客户端，需要注意设置 <code>xhr.withCredentials = true</code>，不然无法携带 cookie。</p>\n<p>对于服务端需要返回两个关键字段，<code>Access-Control-Allow-Origin</code> 和 <code>Access-Control-Allow-Credentials</code>，这样基本就能顺利完成跨域请求。</p>"},{"title":"JavaScript 中的 Unicode","date":"2018-07-21T14:05:58.000Z","index_img":"/img/unicode-in-javascript/banner.png","_content":"\n在以往的项目中经常会遇到多字节字符的处理，最近重新查阅了一些资料，记录一下关于 Unicode 的一些知识点，方便日后学习。\n\n<!-- more -->\n\n### Unicode\n\nUnicode 是目前绝大多数程序使用的字符编码，定义也很简单，用一个码点（`Code Point`）映射一个字符。码点值的范围是从 `U+0000` 到 `U+10FFFF`，可以表示超过 110 万个符号。比如：\n\n- A 的码点：`U+0041`\n- a 的码点：`U+0061`\n- 😐 的码点：`U+1F610`\n\n每个码点的详细信息都可以在 [Codepoints](https://codepoints.net/) 查询到。\n\nUnicode 最前面的 65536 个字符位，称为基本平面（`Basic Multilingual Plane`），它的码点范围是从 `U+0000` 到 `U+FFFF`。最常见的字符都放在这个平面，这是 Unicode 最先定义和公布的一个平面。\n\n剩下的字符都放在补充平面（`Supplementary Plane`），码点范围从 `U+010000` 一直到 `U+10FFFF`，共 16 个。\n\n### UTF 与 UCS\n\nUTF（`Unicode Transformation Format`）Unicode 转换格式，是服务于 Unicode 的，用于将一个 Unicode 码点转换为特定的字节序列。常见的 UTF 有：\n\n> UTF-8 可变字节序列，用 1 到 4 个字节表示一个码点 UTF-16 可变字节序列，用 2 或 4 个字节表示一个码点 UTF-32 固定字节序列，用 4 个字节表示一个码点\n\n然而，由于 JS 问世的时候，`UTF-16` 还没有诞生，所以使用了 `UCS-2` 来处理字符，也因此留下了很多坑。\n\nUCS（`Universal Character Set`）通用字符集，是一个 ISO 标准，目前与 Unicode 可以说是等价的。 相对于 UTF，UCS 也有自己的转换方法（编码）。如：\n\n> UCS-2 用 2 个字节表示 BMP 的码点 UCS-4 用 4 个字节表示码点\n\n`UCS-2` 是一个过时的编码方式，因为它只能编码基本平面（BMP）的码点，在 BMP 的编码上，与 `UTF-16` 是一致的，所以可以认为是 `UTF-16` 的一个子集。\n\n`UCS-4` 则与 `UTF-32` 等价，都是用 4 个字节来编码 Unicode。\n\n`UTF-16` 对于 BMP 的码点，采用 2 个字节进行编码，而 BMP 之外的码点，用 4 个字节组成代理对（`Surrogate Pair`）来表示。其中前两个字节范围是 `U+D800` 到 `U+DBFF`，后两个字节范围是 `U+DC00` 到 `U+DFFF`，通过以下公式完成映射：\n\n```Javascript\n// （H：高字节 L：低字节 c：码点）\n\nH = Math.floor((c - 0x10000) / 0x400) + 0xD800\n\nL = (c – 0x10000) % 0x400 + 0xDC00\n```\n\n### JS 字符处理\n\n这里我们拿上面的 😐 的码点来解释，由于 JS 认为 2 个字节表示一个字符，而 😐 在 JS 中的编码是 `\\ud83d\\ude10`，所以这个表情是占两个字符的，那么这时用 length 判断长度的时候会是 2。\n\n这时候，我们可以通过正则来识别这些占两个字符的文字或表情，然后将其替换为 BMP 内的字符就可以了。\n\n```Javascript\nvar reg = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g // 匹配 UTF-16 的代理对\n\nfunction count(string) {\n\treturn string\n\t\t.replace(reg, '-')\n\t\t.length\n}\n\ncount('😐') // 1\n```\n\n当然，ES6 中已经增加了很多对于 Unicode 字符的新方法，比如 `String.codePointAt()` 方法，`\\u{128528}` 通过加上花括号和标示来表示而不用去计算代理对。\n","source":"_posts/unicode-in-javascript.md","raw":"---\ntitle: JavaScript 中的 Unicode\ndate: 2018-7-21 22:05:58\ncategories:\n  - FE\ntags:\n  - Javascript\n  - Unicode\nindex_img: /img/unicode-in-javascript/banner.png\n---\n\n在以往的项目中经常会遇到多字节字符的处理，最近重新查阅了一些资料，记录一下关于 Unicode 的一些知识点，方便日后学习。\n\n<!-- more -->\n\n### Unicode\n\nUnicode 是目前绝大多数程序使用的字符编码，定义也很简单，用一个码点（`Code Point`）映射一个字符。码点值的范围是从 `U+0000` 到 `U+10FFFF`，可以表示超过 110 万个符号。比如：\n\n- A 的码点：`U+0041`\n- a 的码点：`U+0061`\n- 😐 的码点：`U+1F610`\n\n每个码点的详细信息都可以在 [Codepoints](https://codepoints.net/) 查询到。\n\nUnicode 最前面的 65536 个字符位，称为基本平面（`Basic Multilingual Plane`），它的码点范围是从 `U+0000` 到 `U+FFFF`。最常见的字符都放在这个平面，这是 Unicode 最先定义和公布的一个平面。\n\n剩下的字符都放在补充平面（`Supplementary Plane`），码点范围从 `U+010000` 一直到 `U+10FFFF`，共 16 个。\n\n### UTF 与 UCS\n\nUTF（`Unicode Transformation Format`）Unicode 转换格式，是服务于 Unicode 的，用于将一个 Unicode 码点转换为特定的字节序列。常见的 UTF 有：\n\n> UTF-8 可变字节序列，用 1 到 4 个字节表示一个码点 UTF-16 可变字节序列，用 2 或 4 个字节表示一个码点 UTF-32 固定字节序列，用 4 个字节表示一个码点\n\n然而，由于 JS 问世的时候，`UTF-16` 还没有诞生，所以使用了 `UCS-2` 来处理字符，也因此留下了很多坑。\n\nUCS（`Universal Character Set`）通用字符集，是一个 ISO 标准，目前与 Unicode 可以说是等价的。 相对于 UTF，UCS 也有自己的转换方法（编码）。如：\n\n> UCS-2 用 2 个字节表示 BMP 的码点 UCS-4 用 4 个字节表示码点\n\n`UCS-2` 是一个过时的编码方式，因为它只能编码基本平面（BMP）的码点，在 BMP 的编码上，与 `UTF-16` 是一致的，所以可以认为是 `UTF-16` 的一个子集。\n\n`UCS-4` 则与 `UTF-32` 等价，都是用 4 个字节来编码 Unicode。\n\n`UTF-16` 对于 BMP 的码点，采用 2 个字节进行编码，而 BMP 之外的码点，用 4 个字节组成代理对（`Surrogate Pair`）来表示。其中前两个字节范围是 `U+D800` 到 `U+DBFF`，后两个字节范围是 `U+DC00` 到 `U+DFFF`，通过以下公式完成映射：\n\n```Javascript\n// （H：高字节 L：低字节 c：码点）\n\nH = Math.floor((c - 0x10000) / 0x400) + 0xD800\n\nL = (c – 0x10000) % 0x400 + 0xDC00\n```\n\n### JS 字符处理\n\n这里我们拿上面的 😐 的码点来解释，由于 JS 认为 2 个字节表示一个字符，而 😐 在 JS 中的编码是 `\\ud83d\\ude10`，所以这个表情是占两个字符的，那么这时用 length 判断长度的时候会是 2。\n\n这时候，我们可以通过正则来识别这些占两个字符的文字或表情，然后将其替换为 BMP 内的字符就可以了。\n\n```Javascript\nvar reg = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g // 匹配 UTF-16 的代理对\n\nfunction count(string) {\n\treturn string\n\t\t.replace(reg, '-')\n\t\t.length\n}\n\ncount('😐') // 1\n```\n\n当然，ES6 中已经增加了很多对于 Unicode 字符的新方法，比如 `String.codePointAt()` 方法，`\\u{128528}` 通过加上花括号和标示来表示而不用去计算代理对。\n","slug":"unicode-in-javascript","published":1,"updated":"2022-08-27T10:26:48.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clejnkd4y000cuoqr64eg3sic","content":"<p>在以往的项目中经常会遇到多字节字符的处理，最近重新查阅了一些资料，记录一下关于 Unicode 的一些知识点，方便日后学习。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h3><p>Unicode 是目前绝大多数程序使用的字符编码，定义也很简单，用一个码点（<code>Code Point</code>）映射一个字符。码点值的范围是从 <code>U+0000</code> 到 <code>U+10FFFF</code>，可以表示超过 110 万个符号。比如：</p>\n<ul>\n<li>A 的码点：<code>U+0041</code></li>\n<li>a 的码点：<code>U+0061</code></li>\n<li>😐 的码点：<code>U+1F610</code></li>\n</ul>\n<p>每个码点的详细信息都可以在 <a href=\"https://codepoints.net/\">Codepoints</a> 查询到。</p>\n<p>Unicode 最前面的 65536 个字符位，称为基本平面（<code>Basic Multilingual Plane</code>），它的码点范围是从 <code>U+0000</code> 到 <code>U+FFFF</code>。最常见的字符都放在这个平面，这是 Unicode 最先定义和公布的一个平面。</p>\n<p>剩下的字符都放在补充平面（<code>Supplementary Plane</code>），码点范围从 <code>U+010000</code> 一直到 <code>U+10FFFF</code>，共 16 个。</p>\n<h3 id=\"UTF-与-UCS\"><a href=\"#UTF-与-UCS\" class=\"headerlink\" title=\"UTF 与 UCS\"></a>UTF 与 UCS</h3><p>UTF（<code>Unicode Transformation Format</code>）Unicode 转换格式，是服务于 Unicode 的，用于将一个 Unicode 码点转换为特定的字节序列。常见的 UTF 有：</p>\n<blockquote>\n<p>UTF-8 可变字节序列，用 1 到 4 个字节表示一个码点 UTF-16 可变字节序列，用 2 或 4 个字节表示一个码点 UTF-32 固定字节序列，用 4 个字节表示一个码点</p>\n</blockquote>\n<p>然而，由于 JS 问世的时候，<code>UTF-16</code> 还没有诞生，所以使用了 <code>UCS-2</code> 来处理字符，也因此留下了很多坑。</p>\n<p>UCS（<code>Universal Character Set</code>）通用字符集，是一个 ISO 标准，目前与 Unicode 可以说是等价的。 相对于 UTF，UCS 也有自己的转换方法（编码）。如：</p>\n<blockquote>\n<p>UCS-2 用 2 个字节表示 BMP 的码点 UCS-4 用 4 个字节表示码点</p>\n</blockquote>\n<p><code>UCS-2</code> 是一个过时的编码方式，因为它只能编码基本平面（BMP）的码点，在 BMP 的编码上，与 <code>UTF-16</code> 是一致的，所以可以认为是 <code>UTF-16</code> 的一个子集。</p>\n<p><code>UCS-4</code> 则与 <code>UTF-32</code> 等价，都是用 4 个字节来编码 Unicode。</p>\n<p><code>UTF-16</code> 对于 BMP 的码点，采用 2 个字节进行编码，而 BMP 之外的码点，用 4 个字节组成代理对（<code>Surrogate Pair</code>）来表示。其中前两个字节范围是 <code>U+D800</code> 到 <code>U+DBFF</code>，后两个字节范围是 <code>U+DC00</code> 到 <code>U+DFFF</code>，通过以下公式完成映射：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// （H：高字节 L：低字节 c：码点）</span><br><br>H = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((c - <span class=\"hljs-number\">0x10000</span>) / <span class=\"hljs-number\">0x400</span>) + <span class=\"hljs-number\">0xD800</span><br><br>L = (c – <span class=\"hljs-number\">0x10000</span>) % <span class=\"hljs-number\">0x400</span> + <span class=\"hljs-number\">0xDC00</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"JS-字符处理\"><a href=\"#JS-字符处理\" class=\"headerlink\" title=\"JS 字符处理\"></a>JS 字符处理</h3><p>这里我们拿上面的 😐 的码点来解释，由于 JS 认为 2 个字节表示一个字符，而 😐 在 JS 中的编码是 <code>\\ud83d\\ude10</code>，所以这个表情是占两个字符的，那么这时用 length 判断长度的时候会是 2。</p>\n<p>这时候，我们可以通过正则来识别这些占两个字符的文字或表情，然后将其替换为 BMP 内的字符就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-regexp\">/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g</span> <span class=\"hljs-comment\">// 匹配 UTF-16 的代理对</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">count</span>(<span class=\"hljs-params\">string</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> string<br>\t\t.<span class=\"hljs-title function_\">replace</span>(reg, <span class=\"hljs-string\">&#x27;-&#x27;</span>)<br>\t\t.<span class=\"hljs-property\">length</span><br>&#125;<br><br><span class=\"hljs-title function_\">count</span>(<span class=\"hljs-string\">&#x27;😐&#x27;</span>) <span class=\"hljs-comment\">// 1</span><br></code></pre></td></tr></table></figure>\n\n<p>当然，ES6 中已经增加了很多对于 Unicode 字符的新方法，比如 <code>String.codePointAt()</code> 方法，<code>\\u&#123;128528&#125;</code> 通过加上花括号和标示来表示而不用去计算代理对。</p>\n","site":{"data":{}},"excerpt":"<p>在以往的项目中经常会遇到多字节字符的处理，最近重新查阅了一些资料，记录一下关于 Unicode 的一些知识点，方便日后学习。</p>","more":"<h3 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h3><p>Unicode 是目前绝大多数程序使用的字符编码，定义也很简单，用一个码点（<code>Code Point</code>）映射一个字符。码点值的范围是从 <code>U+0000</code> 到 <code>U+10FFFF</code>，可以表示超过 110 万个符号。比如：</p>\n<ul>\n<li>A 的码点：<code>U+0041</code></li>\n<li>a 的码点：<code>U+0061</code></li>\n<li>😐 的码点：<code>U+1F610</code></li>\n</ul>\n<p>每个码点的详细信息都可以在 <a href=\"https://codepoints.net/\">Codepoints</a> 查询到。</p>\n<p>Unicode 最前面的 65536 个字符位，称为基本平面（<code>Basic Multilingual Plane</code>），它的码点范围是从 <code>U+0000</code> 到 <code>U+FFFF</code>。最常见的字符都放在这个平面，这是 Unicode 最先定义和公布的一个平面。</p>\n<p>剩下的字符都放在补充平面（<code>Supplementary Plane</code>），码点范围从 <code>U+010000</code> 一直到 <code>U+10FFFF</code>，共 16 个。</p>\n<h3 id=\"UTF-与-UCS\"><a href=\"#UTF-与-UCS\" class=\"headerlink\" title=\"UTF 与 UCS\"></a>UTF 与 UCS</h3><p>UTF（<code>Unicode Transformation Format</code>）Unicode 转换格式，是服务于 Unicode 的，用于将一个 Unicode 码点转换为特定的字节序列。常见的 UTF 有：</p>\n<blockquote>\n<p>UTF-8 可变字节序列，用 1 到 4 个字节表示一个码点 UTF-16 可变字节序列，用 2 或 4 个字节表示一个码点 UTF-32 固定字节序列，用 4 个字节表示一个码点</p>\n</blockquote>\n<p>然而，由于 JS 问世的时候，<code>UTF-16</code> 还没有诞生，所以使用了 <code>UCS-2</code> 来处理字符，也因此留下了很多坑。</p>\n<p>UCS（<code>Universal Character Set</code>）通用字符集，是一个 ISO 标准，目前与 Unicode 可以说是等价的。 相对于 UTF，UCS 也有自己的转换方法（编码）。如：</p>\n<blockquote>\n<p>UCS-2 用 2 个字节表示 BMP 的码点 UCS-4 用 4 个字节表示码点</p>\n</blockquote>\n<p><code>UCS-2</code> 是一个过时的编码方式，因为它只能编码基本平面（BMP）的码点，在 BMP 的编码上，与 <code>UTF-16</code> 是一致的，所以可以认为是 <code>UTF-16</code> 的一个子集。</p>\n<p><code>UCS-4</code> 则与 <code>UTF-32</code> 等价，都是用 4 个字节来编码 Unicode。</p>\n<p><code>UTF-16</code> 对于 BMP 的码点，采用 2 个字节进行编码，而 BMP 之外的码点，用 4 个字节组成代理对（<code>Surrogate Pair</code>）来表示。其中前两个字节范围是 <code>U+D800</code> 到 <code>U+DBFF</code>，后两个字节范围是 <code>U+DC00</code> 到 <code>U+DFFF</code>，通过以下公式完成映射：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// （H：高字节 L：低字节 c：码点）</span><br><br>H = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((c - <span class=\"hljs-number\">0x10000</span>) / <span class=\"hljs-number\">0x400</span>) + <span class=\"hljs-number\">0xD800</span><br><br>L = (c – <span class=\"hljs-number\">0x10000</span>) % <span class=\"hljs-number\">0x400</span> + <span class=\"hljs-number\">0xDC00</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"JS-字符处理\"><a href=\"#JS-字符处理\" class=\"headerlink\" title=\"JS 字符处理\"></a>JS 字符处理</h3><p>这里我们拿上面的 😐 的码点来解释，由于 JS 认为 2 个字节表示一个字符，而 😐 在 JS 中的编码是 <code>\\ud83d\\ude10</code>，所以这个表情是占两个字符的，那么这时用 length 判断长度的时候会是 2。</p>\n<p>这时候，我们可以通过正则来识别这些占两个字符的文字或表情，然后将其替换为 BMP 内的字符就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-regexp\">/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g</span> <span class=\"hljs-comment\">// 匹配 UTF-16 的代理对</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">count</span>(<span class=\"hljs-params\">string</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> string<br>\t\t.<span class=\"hljs-title function_\">replace</span>(reg, <span class=\"hljs-string\">&#x27;-&#x27;</span>)<br>\t\t.<span class=\"hljs-property\">length</span><br>&#125;<br><br><span class=\"hljs-title function_\">count</span>(<span class=\"hljs-string\">&#x27;😐&#x27;</span>) <span class=\"hljs-comment\">// 1</span><br></code></pre></td></tr></table></figure>\n\n<p>当然，ES6 中已经增加了很多对于 Unicode 字符的新方法，比如 <code>String.codePointAt()</code> 方法，<code>\\u&#123;128528&#125;</code> 通过加上花括号和标示来表示而不用去计算代理对。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"clejnkd4q0001uoqrbawiafgx","category_id":"clejnkd4t0003uoqrf5v6345d","_id":"clejnkd4v0006uoqr99k95k9i"},{"post_id":"clejnkd4w0007uoqr5l8d0h3m","category_id":"clejnkd4t0003uoqrf5v6345d","_id":"clejnkd4z000duoqrf0nudust"},{"post_id":"clejnkd4w0008uoqr3lrzgc97","category_id":"clejnkd4y000buoqr0ocdex44","_id":"clejnkd50000iuoqrfcii8qla"},{"post_id":"clejnkd4x000auoqrfdpv8z9t","category_id":"clejnkd4z000guoqr5e1b2iua","_id":"clejnkd51000muoqr8ze678ci"},{"post_id":"clejnkd4y000cuoqr64eg3sic","category_id":"clejnkd4z000guoqr5e1b2iua","_id":"clejnkd51000puoqrhvwsayit"}],"PostTag":[{"post_id":"clejnkd4q0001uoqrbawiafgx","tag_id":"clejnkd4u0004uoqrfue53069","_id":"clejnkd4v0005uoqr2h6k97f4"},{"post_id":"clejnkd4w0007uoqr5l8d0h3m","tag_id":"clejnkd4x0009uoqr8mtj99a8","_id":"clejnkd4z000fuoqrb1ssejqf"},{"post_id":"clejnkd4w0008uoqr3lrzgc97","tag_id":"clejnkd4z000euoqrfvhdejzo","_id":"clejnkd50000juoqr0vjg9cdr"},{"post_id":"clejnkd4x000auoqrfdpv8z9t","tag_id":"clejnkd4z000huoqrciv36l3t","_id":"clejnkd51000nuoqr9aikhp31"},{"post_id":"clejnkd4y000cuoqr64eg3sic","tag_id":"clejnkd51000luoqr7oi3ca6m","_id":"clejnkd51000quoqrez9mcoxr"},{"post_id":"clejnkd4y000cuoqr64eg3sic","tag_id":"clejnkd51000ouoqrc2j1a4x0","_id":"clejnkd51000ruoqr7ig8d2y9"}],"Tag":[{"name":"Telegram","_id":"clejnkd4u0004uoqrfue53069"},{"name":"Hexo","_id":"clejnkd4x0009uoqr8mtj99a8"},{"name":"Network","_id":"clejnkd4z000euoqrfvhdejzo"},{"name":"Browser","_id":"clejnkd4z000huoqrciv36l3t"},{"name":"Javascript","_id":"clejnkd51000luoqr7oi3ca6m"},{"name":"Unicode","_id":"clejnkd51000ouoqrc2j1a4x0"}]}}